{
  "version": 3,
  "sources": ["../../es5-ext/global.js", "../../websocket/package.json", "../../websocket/lib/version.js", "../../websocket/lib/browser.js", "../../@supabase/supabase-js/src/lib/version.ts", "../../@supabase/supabase-js/src/lib/constants.ts", "../../@supabase/supabase-js/src/lib/helpers.ts", "../../@supabase/gotrue-js/src/lib/version.ts", "../../@supabase/gotrue-js/src/lib/constants.ts", "../../@supabase/gotrue-js/src/lib/fetch.ts", "../../@supabase/gotrue-js/src/lib/cookies.ts", "../../@supabase/gotrue-js/src/lib/helpers.ts", "../../@supabase/gotrue-js/src/GoTrueApi.ts", "../../@supabase/gotrue-js/src/lib/polyfills.ts", "../../@supabase/gotrue-js/src/GoTrueClient.ts", "../../@supabase/supabase-js/src/lib/SupabaseAuthClient.ts", "../../@supabase/postgrest-js/src/lib/types.ts", "../../@supabase/postgrest-js/src/lib/PostgrestTransformBuilder.ts", "../../@supabase/postgrest-js/src/lib/PostgrestFilterBuilder.ts", "../../@supabase/postgrest-js/src/lib/PostgrestQueryBuilder.ts", "../../@supabase/postgrest-js/src/lib/PostgrestRpcBuilder.ts", "../../@supabase/postgrest-js/src/lib/version.ts", "../../@supabase/postgrest-js/src/lib/constants.ts", "../../@supabase/postgrest-js/src/PostgrestClient.ts", "../../@supabase/realtime-js/src/lib/transformers.ts", "../../@supabase/realtime-js/src/RealtimeClient.ts", "../../@supabase/realtime-js/src/lib/version.ts", "../../@supabase/realtime-js/src/lib/constants.ts", "../../@supabase/realtime-js/src/lib/timer.ts", "../../@supabase/realtime-js/src/lib/serializer.ts", "../../@supabase/realtime-js/src/lib/push.ts", "../../@supabase/realtime-js/src/RealtimeSubscription.ts", "../../@supabase/supabase-js/src/lib/SupabaseRealtimeClient.ts", "../../@supabase/supabase-js/src/lib/SupabaseQueryBuilder.ts", "../../@supabase/storage-js/src/lib/version.ts", "../../@supabase/storage-js/src/lib/constants.ts", "../../@supabase/storage-js/src/lib/fetch.ts", "../../@supabase/storage-js/src/lib/helpers.ts", "../../@supabase/storage-js/src/lib/StorageBucketApi.ts", "../../@supabase/storage-js/src/lib/StorageFileApi.ts", "../../@supabase/storage-js/src/StorageClient.ts", "../../@supabase/functions-js/src/helper.ts", "../../@supabase/functions-js/src/index.ts", "../../@supabase/supabase-js/src/SupabaseClient.ts", "../../@supabase/supabase-js/src/index.ts"],
  "sourcesContent": ["var naiveFallback = function () {\n\tif (typeof self === \"object\" && self) return self;\n\tif (typeof window === \"object\" && window) return window;\n\tthrow new Error(\"Unable to resolve global `this`\");\n};\n\nmodule.exports = (function () {\n\tif (this) return this;\n\n\t// Unexpected strict mode (may happen if e.g. bundled into ESM module)\n\n\t// Fallback to standard globalThis if available\n\tif (typeof globalThis === \"object\" && globalThis) return globalThis;\n\n\t// Thanks @mathiasbynens -> https://mathiasbynens.be/notes/globalthis\n\t// In all ES5+ engines global object inherits from Object.prototype\n\t// (if you approached one that doesn't please report)\n\ttry {\n\t\tObject.defineProperty(Object.prototype, \"__global__\", {\n\t\t\tget: function () { return this; },\n\t\t\tconfigurable: true\n\t\t});\n\t} catch (error) {\n\t\t// Unfortunate case of updates to Object.prototype being restricted\n\t\t// via preventExtensions, seal or freeze\n\t\treturn naiveFallback();\n\t}\n\ttry {\n\t\t// Safari case (window.__global__ works, but __global__ does not)\n\t\tif (!__global__) return naiveFallback();\n\t\treturn __global__;\n\t} finally {\n\t\tdelete Object.prototype.__global__;\n\t}\n})();\n", "{\n  \"name\": \"websocket\",\n  \"description\": \"Websocket Client & Server Library implementing the WebSocket protocol as specified in RFC 6455.\",\n  \"keywords\": [\n    \"websocket\",\n    \"websockets\",\n    \"socket\",\n    \"networking\",\n    \"comet\",\n    \"push\",\n    \"RFC-6455\",\n    \"realtime\",\n    \"server\",\n    \"client\"\n  ],\n  \"author\": \"Brian McKelvey <theturtle32@gmail.com> (https://github.com/theturtle32)\",\n  \"contributors\": [\n    \"IÃ±aki Baz Castillo <ibc@aliax.net> (http://dev.sipdoc.net)\"\n  ],\n  \"version\": \"1.0.35\",\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/theturtle32/WebSocket-Node.git\"\n  },\n  \"homepage\": \"https://github.com/theturtle32/WebSocket-Node\",\n  \"engines\": {\n    \"node\": \">=4.0.0\"\n  },\n  \"dependencies\": {\n    \"bufferutil\": \"^4.0.1\",\n    \"debug\": \"^2.2.0\",\n    \"es5-ext\": \"^0.10.63\",\n    \"typedarray-to-buffer\": \"^3.1.5\",\n    \"utf-8-validate\": \"^5.0.2\",\n    \"yaeti\": \"^0.0.6\"\n  },\n  \"devDependencies\": {\n    \"buffer-equal\": \"^1.0.0\",\n    \"gulp\": \"^4.0.2\",\n    \"gulp-jshint\": \"^2.0.4\",\n    \"jshint-stylish\": \"^2.2.1\",\n    \"jshint\": \"^2.0.0\",\n    \"tape\": \"^4.9.1\"\n  },\n  \"config\": {\n    \"verbose\": false\n  },\n  \"scripts\": {\n    \"test\": \"tape test/unit/*.js\",\n    \"gulp\": \"gulp\"\n  },\n  \"main\": \"index\",\n  \"directories\": {\n    \"lib\": \"./lib\"\n  },\n  \"browser\": \"lib/browser.js\",\n  \"license\": \"Apache-2.0\"\n}\n", "module.exports = require('../package.json').version;\n", "var _globalThis;\nif (typeof globalThis === 'object') {\n\t_globalThis = globalThis;\n} else {\n\ttry {\n\t\t_globalThis = require('es5-ext/global');\n\t} catch (error) {\n\t} finally {\n\t\tif (!_globalThis && typeof window !== 'undefined') { _globalThis = window; }\n\t\tif (!_globalThis) { throw new Error('Could not determine global this'); }\n\t}\n}\n\nvar NativeWebSocket = _globalThis.WebSocket || _globalThis.MozWebSocket;\nvar websocket_version = require('./version');\n\n\n/**\n * Expose a W3C WebSocket class with just one or two arguments.\n */\nfunction W3CWebSocket(uri, protocols) {\n\tvar native_instance;\n\n\tif (protocols) {\n\t\tnative_instance = new NativeWebSocket(uri, protocols);\n\t}\n\telse {\n\t\tnative_instance = new NativeWebSocket(uri);\n\t}\n\n\t/**\n\t * 'native_instance' is an instance of nativeWebSocket (the browser's WebSocket\n\t * class). Since it is an Object it will be returned as it is when creating an\n\t * instance of W3CWebSocket via 'new W3CWebSocket()'.\n\t *\n\t * ECMAScript 5: http://bclary.com/2004/11/07/#a-13.2.2\n\t */\n\treturn native_instance;\n}\nif (NativeWebSocket) {\n\t['CONNECTING', 'OPEN', 'CLOSING', 'CLOSED'].forEach(function(prop) {\n\t\tObject.defineProperty(W3CWebSocket, prop, {\n\t\t\tget: function() { return NativeWebSocket[prop]; }\n\t\t});\n\t});\n}\n\n/**\n * Module exports.\n */\nmodule.exports = {\n    'w3cwebsocket' : NativeWebSocket ? W3CWebSocket : null,\n    'version'      : websocket_version\n};\n", "export const version = '1.35.7'\n", "// constants.ts\nimport { version } from './version'\nexport const DEFAULT_HEADERS = { 'X-Client-Info': `supabase-js/${version}` }\nexport const STORAGE_KEY = 'supabase.auth.token'\n", "// helpers.ts\n\nexport function uuid() {\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n    var r = (Math.random() * 16) | 0,\n      v = c == 'x' ? r : (r & 0x3) | 0x8\n    return v.toString(16)\n  })\n}\n\nexport function stripTrailingSlash(url: string): string {\n  return url.replace(/\\/$/, '')\n}\n\nexport const isBrowser = () => typeof window !== 'undefined'\n", "// generated by genversion\nexport const version = '1.24.0'\n", "import { version } from './version'\nexport const GOTRUE_URL = 'http://localhost:9999'\nexport const AUDIENCE = ''\nexport const DEFAULT_HEADERS = { 'X-Client-Info': `gotrue-js/${version}` }\nexport const EXPIRY_MARGIN = 10 // in seconds\nexport const NETWORK_FAILURE = {\n  ERROR_MESSAGE: 'Request Failed',\n  MAX_RETRIES: 10,\n  RETRY_INTERVAL: 2, // in deciseconds\n}\nexport const STORAGE_KEY = 'supabase.auth.token'\nexport const COOKIE_OPTIONS = {\n  name: 'sb',\n  lifetime: 60 * 60 * 8,\n  domain: '',\n  path: '/',\n  sameSite: 'lax',\n}\n", "import { NETWORK_FAILURE } from './constants'\n\nexport type Fetch = typeof fetch\n\nexport interface FetchOptions {\n  headers?: {\n    [key: string]: string\n  }\n  noResolveJson?: boolean\n}\n\nexport type RequestMethodType = 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE'\n\nconst _getErrorMessage = (err: any): string =>\n  err.msg || err.message || err.error_description || err.error || JSON.stringify(err)\n\nconst handleError = (error: any, reject: any) => {\n  if (!error?.status) {\n    return reject({ message: NETWORK_FAILURE.ERROR_MESSAGE })\n  }\n  if (typeof error.json !== 'function') {\n    return reject(error)\n  }\n  error.json().then((err: any) => {\n    return reject({\n      message: _getErrorMessage(err),\n      status: error?.status || 500,\n    })\n  })\n}\n\nconst _getRequestParams = (method: RequestMethodType, options?: FetchOptions, body?: object) => {\n  const params: { [k: string]: any } = { method, headers: options?.headers || {} }\n\n  if (method === 'GET') {\n    return params\n  }\n\n  params.headers = { 'Content-Type': 'application/json;charset=UTF-8', ...options?.headers }\n  params.body = JSON.stringify(body)\n\n  return params\n}\n\nasync function _handleRequest(\n  fetcher: Fetch,\n  method: RequestMethodType,\n  url: string,\n  options?: FetchOptions,\n  body?: object\n): Promise<any> {\n  return new Promise((resolve, reject) => {\n    fetcher(url, _getRequestParams(method, options, body))\n      .then((result) => {\n        if (!result.ok) throw result\n        if (options?.noResolveJson) return resolve\n        return result.json()\n      })\n      .then((data) => resolve(data))\n      .catch((error) => handleError(error, reject))\n  })\n}\n\nexport async function get(fetcher: Fetch, url: string, options?: FetchOptions): Promise<any> {\n  return _handleRequest(fetcher, 'GET', url, options)\n}\n\nexport async function post(\n  fetcher: Fetch,\n  url: string,\n  body: object,\n  options?: FetchOptions\n): Promise<any> {\n  return _handleRequest(fetcher, 'POST', url, options, body)\n}\n\nexport async function put(\n  fetcher: Fetch,\n  url: string,\n  body: object,\n  options?: FetchOptions\n): Promise<any> {\n  return _handleRequest(fetcher, 'PUT', url, options, body)\n}\n\nexport async function remove(\n  fetcher: Fetch,\n  url: string,\n  body: object,\n  options?: FetchOptions\n): Promise<any> {\n  return _handleRequest(fetcher, 'DELETE', url, options, body)\n}\n", "type Cookie = {\n  name: string\n  value: string\n  maxAge: number\n  domain?: string\n  path?: string\n  sameSite?: string\n}\n\n/**\n * Serialize data into a cookie header.\n */\nfunction serialize(\n  name: string,\n  val: string,\n  options: {\n    maxAge: number\n    domain: string\n    path: string\n    expires: Date\n    httpOnly: boolean\n    secure: boolean\n    sameSite: string\n  }\n) {\n  const opt = options || {}\n  const enc = encodeURIComponent\n  /* eslint-disable-next-line no-control-regex */\n  const fieldContentRegExp = /^[\\u0009\\u0020-\\u007e\\u0080-\\u00ff]+$/\n\n  if (typeof enc !== 'function') {\n    throw new TypeError('option encode is invalid')\n  }\n\n  if (!fieldContentRegExp.test(name)) {\n    throw new TypeError('argument name is invalid')\n  }\n\n  const value = enc(val)\n\n  if (value && !fieldContentRegExp.test(value)) {\n    throw new TypeError('argument val is invalid')\n  }\n\n  let str = name + '=' + value\n\n  if (null != opt.maxAge) {\n    const maxAge = opt.maxAge - 0\n\n    if (isNaN(maxAge) || !isFinite(maxAge)) {\n      throw new TypeError('option maxAge is invalid')\n    }\n\n    str += '; Max-Age=' + Math.floor(maxAge)\n  }\n\n  if (opt.domain) {\n    if (!fieldContentRegExp.test(opt.domain)) {\n      throw new TypeError('option domain is invalid')\n    }\n\n    str += '; Domain=' + opt.domain\n  }\n\n  if (opt.path) {\n    if (!fieldContentRegExp.test(opt.path)) {\n      throw new TypeError('option path is invalid')\n    }\n\n    str += '; Path=' + opt.path\n  }\n\n  if (opt.expires) {\n    if (typeof opt.expires.toUTCString !== 'function') {\n      throw new TypeError('option expires is invalid')\n    }\n\n    str += '; Expires=' + opt.expires.toUTCString()\n  }\n\n  if (opt.httpOnly) {\n    str += '; HttpOnly'\n  }\n\n  if (opt.secure) {\n    str += '; Secure'\n  }\n\n  if (opt.sameSite) {\n    const sameSite = typeof opt.sameSite === 'string' ? opt.sameSite.toLowerCase() : opt.sameSite\n\n    switch (sameSite) {\n      case 'lax':\n        str += '; SameSite=Lax'\n        break\n      case 'strict':\n        str += '; SameSite=Strict'\n        break\n      case 'none':\n        str += '; SameSite=None'\n        break\n      default:\n        throw new TypeError('option sameSite is invalid')\n    }\n  }\n\n  return str\n}\n\n/**\n * Based on the environment and the request we know if a secure cookie can be set.\n */\nfunction isSecureEnvironment(req: any) {\n  if (!req || !req.headers || !req.headers.host) {\n    throw new Error('The \"host\" request header is not available')\n  }\n\n  const host =\n    (req.headers.host.indexOf(':') > -1 && req.headers.host.split(':')[0]) || req.headers.host\n  if (['localhost', '127.0.0.1'].indexOf(host) > -1 || host.endsWith('.local')) {\n    return false\n  }\n\n  return true\n}\n\n/**\n * Serialize a cookie to a string.\n */\nfunction serializeCookie(cookie: Cookie, secure: boolean) {\n  return serialize(cookie.name, cookie.value, {\n    maxAge: cookie.maxAge,\n    expires: new Date(Date.now() + cookie.maxAge * 1000),\n    httpOnly: true,\n    secure,\n    path: cookie.path ?? '/',\n    domain: cookie.domain ?? '',\n    sameSite: cookie.sameSite ?? 'lax',\n  })\n}\n\n/**\n * Get Cookie Header strings.\n */\nexport function getCookieString(req: any, res: any, cookies: Array<Cookie>): string[] {\n  const strCookies = cookies.map((c) => serializeCookie(c, isSecureEnvironment(req)))\n  const previousCookies = res.getHeader('Set-Cookie')\n  if (previousCookies) {\n    if (previousCookies instanceof Array) {\n      Array.prototype.push.apply(strCookies, previousCookies)\n    } else if (typeof previousCookies === 'string') {\n      strCookies.push(previousCookies)\n    }\n  }\n  return strCookies\n}\n\n/**\n * Set one or more cookies.\n */\nexport function setCookies(req: any, res: any, cookies: Array<Cookie>) {\n  res.setHeader('Set-Cookie', getCookieString(req, res, cookies))\n}\n\n/**\n * Set one or more cookies.\n */\nexport function setCookie(req: any, res: any, cookie: Cookie) {\n  setCookies(req, res, [cookie])\n}\n\nexport function deleteCookie(req: any, res: any, name: string) {\n  setCookie(req, res, {\n    name,\n    value: '',\n    maxAge: -1,\n  })\n}\n", "import { SupportedStorage } from './types'\n\nexport function expiresAt(expiresIn: number) {\n  const timeNow = Math.round(Date.now() / 1000)\n  return timeNow + expiresIn\n}\n\nexport function uuid() {\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n    const r = (Math.random() * 16) | 0,\n      v = c == 'x' ? r : (r & 0x3) | 0x8\n    return v.toString(16)\n  })\n}\n\nexport const isBrowser = () => typeof window !== 'undefined'\n\nexport function getParameterByName(name: string, url?: string) {\n  if (!url) url = window?.location?.href || ''\n  // eslint-disable-next-line no-useless-escape\n  name = name.replace(/[\\[\\]]/g, '\\\\$&')\n  const regex = new RegExp('[?&#]' + name + '(=([^&#]*)|&|#|$)'),\n    results = regex.exec(url)\n  if (!results) return null\n  if (!results[2]) return ''\n  return decodeURIComponent(results[2].replace(/\\+/g, ' '))\n}\n\ntype Fetch = typeof fetch\n\nexport const resolveFetch = (customFetch?: Fetch): Fetch => {\n  let _fetch: Fetch\n  if (customFetch) {\n    _fetch = customFetch\n  } else if (typeof fetch === 'undefined') {\n    _fetch = async (...args) => await (await import('cross-fetch')).fetch(...args)\n  } else {\n    _fetch = fetch\n  }\n  return (...args) => _fetch(...args)\n}\n\n// LocalStorage helpers\nexport const setItemAsync = async (\n  storage: SupportedStorage,\n  key: string,\n  data: any\n): Promise<void> => {\n  isBrowser() && (await storage?.setItem(key, JSON.stringify(data)))\n}\n\nexport const getItemAsync = async (storage: SupportedStorage, key: string): Promise<any | null> => {\n  const value = isBrowser() && (await storage?.getItem(key))\n  if (!value) return null\n  try {\n    return JSON.parse(value)\n  } catch {\n    return value\n  }\n}\n\nexport const getItemSynchronously = (storage: SupportedStorage, key: string): any | null => {\n  const value = isBrowser() && storage?.getItem(key)\n  if (!value || typeof value !== 'string') {\n    return null\n  }\n  try {\n    return JSON.parse(value)\n  } catch {\n    return value\n  }\n}\n\nexport const removeItemAsync = async (storage: SupportedStorage, key: string): Promise<void> => {\n  isBrowser() && (await storage?.removeItem(key))\n}\n", "import { Fetch, get, post, put, remove } from './lib/fetch'\nimport {\n  Session,\n  Provider,\n  AdminUserAttributes,\n  UserAttributes,\n  CookieOptions,\n  User,\n  OpenIDConnectCredentials,\n  VerifyOTPParams,\n} from './lib/types'\nimport { COOKIE_OPTIONS } from './lib/constants'\nimport { setCookies, getCookieString } from './lib/cookies'\nimport { expiresAt, resolveFetch } from './lib/helpers'\n\nimport type { ApiError } from './lib/types'\nexport default class GoTrueApi {\n  protected url: string\n  protected headers: {\n    [key: string]: string\n  }\n  protected cookieOptions: CookieOptions\n  protected fetch: Fetch\n\n  constructor({\n    url = '',\n    headers = {},\n    cookieOptions,\n    fetch,\n  }: {\n    url: string\n    headers?: {\n      [key: string]: string\n    }\n    cookieOptions?: CookieOptions\n    fetch?: Fetch\n  }) {\n    this.url = url\n    this.headers = headers\n    this.cookieOptions = { ...COOKIE_OPTIONS, ...cookieOptions }\n    this.fetch = resolveFetch(fetch)\n  }\n\n  /**\n   * Create a temporary object with all configured headers and\n   * adds the Authorization token to be used on request methods\n   * @param jwt A valid, logged-in JWT.\n   */\n  private _createRequestHeaders(jwt: string) {\n    const headers = { ...this.headers }\n    headers['Authorization'] = `Bearer ${jwt}`\n    return headers\n  }\n\n  private cookieName() {\n    return this.cookieOptions.name ?? ''\n  }\n\n  /**\n   * Generates the relevant login URL for a third-party provider.\n   * @param provider One of the providers supported by GoTrue.\n   * @param redirectTo A URL or mobile address to send the user to after they are confirmed.\n   * @param scopes A space-separated list of scopes granted to the OAuth application.\n   */\n  getUrlForProvider(\n    provider: Provider,\n    options: {\n      redirectTo?: string\n      scopes?: string\n      queryParams?: { [key: string]: string }\n    }\n  ) {\n    const urlParams: string[] = [`provider=${encodeURIComponent(provider)}`]\n    if (options?.redirectTo) {\n      urlParams.push(`redirect_to=${encodeURIComponent(options.redirectTo)}`)\n    }\n    if (options?.scopes) {\n      urlParams.push(`scopes=${encodeURIComponent(options.scopes)}`)\n    }\n    if (options?.queryParams) {\n      const query = new URLSearchParams(options.queryParams)\n      urlParams.push(`${query}`)\n    }\n    return `${this.url}/authorize?${urlParams.join('&')}`\n  }\n\n  /**\n   * Creates a new user using their email address.\n   * @param email The email address of the user.\n   * @param password The password of the user.\n   * @param redirectTo A URL or mobile address to send the user to after they are confirmed.\n   * @param data Optional user metadata.\n   * @param captchaToken Verification token received when the user completes the captcha on your site.\n   *\n   * @returns A logged-in session if the server has \"autoconfirm\" ON\n   * @returns A user if the server has \"autoconfirm\" OFF\n   */\n  async signUpWithEmail(\n    email: string,\n    password: string,\n    options: {\n      redirectTo?: string\n      data?: object\n      captchaToken?: string\n    } = {}\n  ): Promise<{ data: Session | User | null; error: ApiError | null }> {\n    try {\n      const headers = { ...this.headers }\n      let queryString = ''\n      if (options.redirectTo) {\n        queryString = '?redirect_to=' + encodeURIComponent(options.redirectTo)\n      }\n      const data = await post(\n        this.fetch,\n        `${this.url}/signup${queryString}`,\n        {\n          email,\n          password,\n          data: options.data,\n          gotrue_meta_security: { captcha_token: options.captchaToken },\n        },\n        { headers }\n      )\n      const session = { ...data }\n      if (session.expires_in) session.expires_at = expiresAt(data.expires_in)\n      return { data: session, error: null }\n    } catch (e) {\n      return { data: null, error: e as ApiError }\n    }\n  }\n\n  /**\n   * Logs in an existing user using their email address.\n   * @param email The email address of the user.\n   * @param password The password of the user.\n   * @param redirectTo A URL or mobile address to send the user to after they are confirmed.\n   * @param captchaToken Verification token received when the user completes the captcha on your site.\n   */\n  async signInWithEmail(\n    email: string,\n    password: string,\n    options: {\n      redirectTo?: string\n      captchaToken?: string\n    } = {}\n  ): Promise<{ data: Session | null; error: ApiError | null }> {\n    try {\n      const headers = { ...this.headers }\n      let queryString = '?grant_type=password'\n      if (options.redirectTo) {\n        queryString += '&redirect_to=' + encodeURIComponent(options.redirectTo)\n      }\n      const data = await post(\n        this.fetch,\n        `${this.url}/token${queryString}`,\n        { email, password, gotrue_meta_security: { captcha_token: options.captchaToken } },\n        { headers }\n      )\n      const session = { ...data }\n      if (session.expires_in) session.expires_at = expiresAt(data.expires_in)\n      return { data: session, error: null }\n    } catch (e) {\n      return { data: null, error: e as ApiError }\n    }\n  }\n\n  /**\n   * Signs up a new user using their phone number and a password.\n   * @param phone The phone number of the user.\n   * @param password The password of the user.\n   * @param data Optional user metadata.\n   * @param captchaToken Verification token received when the user completes the captcha on your site.\n   */\n  async signUpWithPhone(\n    phone: string,\n    password: string,\n    options: {\n      data?: object\n      captchaToken?: string\n    } = {}\n  ): Promise<{ data: Session | User | null; error: ApiError | null }> {\n    try {\n      const headers = { ...this.headers }\n      const data = await post(\n        this.fetch,\n        `${this.url}/signup`,\n        {\n          phone,\n          password,\n          data: options.data,\n          gotrue_meta_security: { captcha_token: options.captchaToken },\n        },\n        { headers }\n      )\n      const session = { ...data }\n      if (session.expires_in) session.expires_at = expiresAt(data.expires_in)\n      return { data: session, error: null }\n    } catch (e) {\n      return { data: null, error: e as ApiError }\n    }\n  }\n\n  /**\n   * Logs in an existing user using their phone number and password.\n   * @param phone The phone number of the user.\n   * @param password The password of the user.\n   * @param captchaToken Verification token received when the user completes the captcha on your site.\n   */\n  async signInWithPhone(\n    phone: string,\n    password: string,\n    options: {\n      captchaToken?: string\n    } = {}\n  ): Promise<{ data: Session | null; error: ApiError | null }> {\n    try {\n      const headers = { ...this.headers }\n      const queryString = '?grant_type=password'\n      const data = await post(\n        this.fetch,\n        `${this.url}/token${queryString}`,\n        { phone, password, gotrue_meta_security: { captcha_token: options.captchaToken } },\n        { headers }\n      )\n      const session = { ...data }\n      if (session.expires_in) session.expires_at = expiresAt(data.expires_in)\n      return { data: session, error: null }\n    } catch (e) {\n      return { data: null, error: e as ApiError }\n    }\n  }\n\n  /**\n   * Logs in an OpenID Connect user using their id_token.\n   * @param id_token The IDToken of the user.\n   * @param nonce The nonce of the user. The nonce is a random value generated by the developer (= yourself) before the initial grant is started. You should check the OpenID Connect specification for details. https://openid.net/developers/specs/\n   * @param provider The provider of the user.\n   * @param client_id The clientID of the user.\n   * @param issuer The issuer of the user.\n   */\n  async signInWithOpenIDConnect({\n    id_token,\n    nonce,\n    client_id,\n    issuer,\n    provider,\n  }: OpenIDConnectCredentials): Promise<{ data: Session | null; error: ApiError | null }> {\n    try {\n      const headers = { ...this.headers }\n      const queryString = '?grant_type=id_token'\n      const data = await post(\n        this.fetch,\n        `${this.url}/token${queryString}`,\n        { id_token, nonce, client_id, issuer, provider },\n        { headers }\n      )\n      const session = { ...data }\n      if (session.expires_in) session.expires_at = expiresAt(data.expires_in)\n      return { data: session, error: null }\n    } catch (e) {\n      return { data: null, error: e as ApiError }\n    }\n  }\n\n  /**\n   * Sends a magic login link to an email address.\n   * @param email The email address of the user.\n   * @param shouldCreateUser A boolean flag to indicate whether to automatically create a user on magiclink / otp sign-ins if the user doesn't exist. Defaults to true.\n   * @param redirectTo A URL or mobile address to send the user to after they are confirmed.\n   * @param captchaToken Verification token received when the user completes the captcha on your site.\n   */\n  async sendMagicLinkEmail(\n    email: string,\n    options: {\n      shouldCreateUser?: boolean\n      redirectTo?: string\n      captchaToken?: string\n    } = {}\n  ): Promise<{ data: {} | null; error: ApiError | null }> {\n    try {\n      const headers = { ...this.headers }\n      let queryString = ''\n      if (options.redirectTo) {\n        queryString += '?redirect_to=' + encodeURIComponent(options.redirectTo)\n      }\n\n      const shouldCreateUser = options.shouldCreateUser ?? true\n      const data = await post(\n        this.fetch,\n        `${this.url}/otp${queryString}`,\n        {\n          email,\n          create_user: shouldCreateUser,\n          gotrue_meta_security: { captcha_token: options.captchaToken },\n        },\n        { headers }\n      )\n      return { data, error: null }\n    } catch (e) {\n      return { data: null, error: e as ApiError }\n    }\n  }\n\n  /**\n   * Sends a mobile OTP via SMS. Will register the account if it doesn't already exist\n   * @param phone The user's phone number WITH international prefix\n   * @param shouldCreateUser A boolean flag to indicate whether to automatically create a user on magiclink / otp sign-ins if the user doesn't exist. Defaults to true.\n   * @param captchaToken Verification token received when the user completes the captcha on your site.\n   */\n  async sendMobileOTP(\n    phone: string,\n    options: {\n      shouldCreateUser?: boolean\n      captchaToken?: string\n    } = {}\n  ): Promise<{ data: {} | null; error: ApiError | null }> {\n    try {\n      const shouldCreateUser = options.shouldCreateUser ?? true\n      const headers = { ...this.headers }\n      const data = await post(\n        this.fetch,\n        `${this.url}/otp`,\n        {\n          phone,\n          create_user: shouldCreateUser,\n          gotrue_meta_security: { captcha_token: options.captchaToken },\n        },\n        { headers }\n      )\n      return { data, error: null }\n    } catch (e) {\n      return { data: null, error: e as ApiError }\n    }\n  }\n\n  /**\n   * Removes a logged-in session.\n   * @param jwt A valid, logged-in JWT.\n   */\n  async signOut(jwt: string): Promise<{ error: ApiError | null }> {\n    try {\n      await post(\n        this.fetch,\n        `${this.url}/logout`,\n        {},\n        { headers: this._createRequestHeaders(jwt), noResolveJson: true }\n      )\n      return { error: null }\n    } catch (e) {\n      return { error: e as ApiError }\n    }\n  }\n\n  /**\n   * @deprecated Use `verifyOTP` instead!\n   * @param phone The user's phone number WITH international prefix\n   * @param token token that user was sent to their mobile phone\n   * @param redirectTo A URL or mobile address to send the user to after they are confirmed.\n   */\n  async verifyMobileOTP(\n    phone: string,\n    token: string,\n    options: {\n      redirectTo?: string\n    } = {}\n  ): Promise<{ data: Session | User | null; error: ApiError | null }> {\n    try {\n      const headers = { ...this.headers }\n      const data = await post(\n        this.fetch,\n        `${this.url}/verify`,\n        { phone, token, type: 'sms', redirect_to: options.redirectTo },\n        { headers }\n      )\n      const session = { ...data }\n      if (session.expires_in) session.expires_at = expiresAt(data.expires_in)\n      return { data: session, error: null }\n    } catch (e) {\n      return { data: null, error: e as ApiError }\n    }\n  }\n\n  /**\n   * Send User supplied Email / Mobile OTP to be verified\n   * @param email The user's email address\n   * @param phone The user's phone number WITH international prefix\n   * @param token token that user was sent to their mobile phone\n   * @param type verification type that the otp is generated for\n   * @param redirectTo A URL or mobile address to send the user to after they are confirmed.\n   */\n  async verifyOTP(\n    { email, phone, token, type = 'sms' }: VerifyOTPParams,\n    options: {\n      redirectTo?: string\n    } = {}\n  ): Promise<{ data: Session | User | null; error: ApiError | null }> {\n    try {\n      const headers = { ...this.headers }\n      const data = await post(\n        this.fetch,\n        `${this.url}/verify`,\n        { email, phone, token, type, redirect_to: options.redirectTo },\n        { headers }\n      )\n      const session = { ...data }\n      if (session.expires_in) session.expires_at = expiresAt(data.expires_in)\n      return { data: session, error: null }\n    } catch (e) {\n      return { data: null, error: e as ApiError }\n    }\n  }\n\n  /**\n   * Sends an invite link to an email address.\n   * @param email The email address of the user.\n   * @param redirectTo A URL or mobile address to send the user to after they are confirmed.\n   * @param data Optional user metadata\n   */\n  async inviteUserByEmail(\n    email: string,\n    options: {\n      redirectTo?: string\n      data?: object\n    } = {}\n  ): Promise<{ data: User | null; error: ApiError | null }> {\n    try {\n      const headers = { ...this.headers }\n      let queryString = ''\n      if (options.redirectTo) {\n        queryString += '?redirect_to=' + encodeURIComponent(options.redirectTo)\n      }\n      const data = await post(\n        this.fetch,\n        `${this.url}/invite${queryString}`,\n        { email, data: options.data },\n        { headers }\n      )\n      return { data, error: null }\n    } catch (e) {\n      return { data: null, error: e as ApiError }\n    }\n  }\n\n  /**\n   * Sends a reset request to an email address.\n   * @param email The email address of the user.\n   * @param redirectTo A URL or mobile address to send the user to after they are confirmed.\n   * @param captchaToken Verification token received when the user completes the captcha on your site.\n   */\n  async resetPasswordForEmail(\n    email: string,\n    options: {\n      redirectTo?: string\n      captchaToken?: string\n    } = {}\n  ): Promise<{ data: {} | null; error: ApiError | null }> {\n    try {\n      const headers = { ...this.headers }\n      let queryString = ''\n      if (options.redirectTo) {\n        queryString += '?redirect_to=' + encodeURIComponent(options.redirectTo)\n      }\n      const data = await post(\n        this.fetch,\n        `${this.url}/recover${queryString}`,\n        { email, gotrue_meta_security: { captcha_token: options.captchaToken } },\n        { headers }\n      )\n      return { data, error: null }\n    } catch (e) {\n      return { data: null, error: e as ApiError }\n    }\n  }\n\n  /**\n   * Generates a new JWT.\n   * @param refreshToken A valid refresh token that was returned on login.\n   */\n  async refreshAccessToken(\n    refreshToken: string\n  ): Promise<{ data: Session | null; error: ApiError | null }> {\n    try {\n      const data: any = await post(\n        this.fetch,\n        `${this.url}/token?grant_type=refresh_token`,\n        { refresh_token: refreshToken },\n        { headers: this.headers }\n      )\n      const session = { ...data }\n      if (session.expires_in) session.expires_at = expiresAt(data.expires_in)\n      return { data: session, error: null }\n    } catch (e) {\n      return { data: null, error: e as ApiError }\n    }\n  }\n\n  /**\n   * Set/delete the auth cookie based on the AuthChangeEvent.\n   * Works for Next.js & Express (requires cookie-parser middleware).\n   * @param req The request object.\n   * @param res The response object.\n   */\n  setAuthCookie(req: any, res: any) {\n    if (req.method !== 'POST') {\n      res.setHeader('Allow', 'POST')\n      res.status(405).end('Method Not Allowed')\n    }\n    const { event, session } = req.body\n\n    if (!event) throw new Error('Auth event missing!')\n    if (event === 'SIGNED_IN') {\n      if (!session) throw new Error('Auth session missing!')\n      setCookies(\n        req,\n        res,\n        [\n          { key: 'access-token', value: session.access_token },\n          { key: 'refresh-token', value: session.refresh_token },\n        ].map((token) => ({\n          name: `${this.cookieName()}-${token.key}`,\n          value: token.value,\n          domain: this.cookieOptions.domain,\n          maxAge: this.cookieOptions.lifetime ?? 0,\n          path: this.cookieOptions.path,\n          sameSite: this.cookieOptions.sameSite,\n        }))\n      )\n    }\n    if (event === 'SIGNED_OUT') {\n      setCookies(\n        req,\n        res,\n        ['access-token', 'refresh-token'].map((key) => ({\n          name: `${this.cookieName()}-${key}`,\n          value: '',\n          maxAge: -1,\n        }))\n      )\n    }\n    res.status(200).json({})\n  }\n\n  /**\n   * Deletes the Auth Cookies and redirects to the\n   * @param req The request object.\n   * @param res The response object.\n   * @param options Optionally specify a `redirectTo` URL in the options.\n   */\n  deleteAuthCookie(req: any, res: any, { redirectTo = '/' }: { redirectTo?: string }) {\n    setCookies(\n      req,\n      res,\n      ['access-token', 'refresh-token'].map((key) => ({\n        name: `${this.cookieName()}-${key}`,\n        value: '',\n        maxAge: -1,\n      }))\n    )\n    return res.redirect(307, redirectTo)\n  }\n\n  /**\n   * Helper method to generate the Auth Cookie string for you in case you can't use `setAuthCookie`.\n   * @param req The request object.\n   * @param res The response object.\n   * @returns The Cookie string that needs to be set as the value for the `Set-Cookie` header.\n   */\n  getAuthCookieString(req: any, res: any): string[] {\n    if (req.method !== 'POST') {\n      res.setHeader('Allow', 'POST')\n      res.status(405).end('Method Not Allowed')\n    }\n    const { event, session } = req.body\n\n    if (!event) throw new Error('Auth event missing!')\n    if (event === 'SIGNED_IN') {\n      if (!session) throw new Error('Auth session missing!')\n      return getCookieString(\n        req,\n        res,\n        [\n          { key: 'access-token', value: session.access_token },\n          { key: 'refresh-token', value: session.refresh_token },\n        ].map((token) => ({\n          name: `${this.cookieName()}-${token.key}`,\n          value: token.value,\n          domain: this.cookieOptions.domain,\n          maxAge: this.cookieOptions.lifetime ?? 0,\n          path: this.cookieOptions.path,\n          sameSite: this.cookieOptions.sameSite,\n        }))\n      )\n    }\n    if (event === 'SIGNED_OUT') {\n      return getCookieString(\n        req,\n        res,\n        ['access-token', 'refresh-token'].map((key) => ({\n          name: `${this.cookieName()}-${key}`,\n          value: '',\n          maxAge: -1,\n        }))\n      )\n    }\n    return res.getHeader('Set-Cookie')\n  }\n\n  /**\n   * Generates links to be sent via email or other.\n   * @param type The link type (\"signup\" or \"magiclink\" or \"recovery\" or \"invite\").\n   * @param email The user's email.\n   * @param password User password. For signup only.\n   * @param data Optional user metadata. For signup only.\n   * @param redirectTo The link type (\"signup\" or \"magiclink\" or \"recovery\" or \"invite\").\n   */\n  async generateLink(\n    type:\n      | 'signup'\n      | 'magiclink'\n      | 'recovery'\n      | 'invite'\n      | 'email_change_current'\n      | 'email_change_new',\n    email: string,\n    options: {\n      password?: string\n      data?: object\n      redirectTo?: string\n    } = {}\n  ): Promise<{ data: Session | User | null; error: ApiError | null }> {\n    try {\n      const data: any = await post(\n        this.fetch,\n        `${this.url}/admin/generate_link`,\n        {\n          type,\n          email,\n          password: options.password,\n          data: options.data,\n          redirect_to: options.redirectTo,\n        },\n        { headers: this.headers }\n      )\n      return { data, error: null }\n    } catch (e) {\n      return { data: null, error: e as ApiError }\n    }\n  }\n\n  // User Admin API\n\n  /**\n   * Creates a new user.\n   *\n   * This function should only be called on a server. Never expose your `service_role` key in the browser.\n   *\n   * @param attributes The data you want to create the user with.\n   */\n  async createUser(\n    attributes: AdminUserAttributes\n  ): Promise<\n    { user: null; data: null; error: ApiError } | { user: User; data: User; error: null }\n  > {\n    try {\n      const data: any = await post(this.fetch, `${this.url}/admin/users`, attributes, {\n        headers: this.headers,\n      })\n      return { user: data, data, error: null }\n    } catch (e) {\n      return { user: null, data: null, error: e as ApiError }\n    }\n  }\n\n  /**\n   * Get a list of users.\n   *\n   * This function should only be called on a server. Never expose your `service_role` key in the browser.\n   */\n  async listUsers(): Promise<{ data: null; error: ApiError } | { data: User[]; error: null }> {\n    try {\n      const data: any = await get(this.fetch, `${this.url}/admin/users`, {\n        headers: this.headers,\n      })\n      return { data: data.users, error: null }\n    } catch (e) {\n      return { data: null, error: e as ApiError }\n    }\n  }\n\n  /**\n   * Get user by id.\n   *\n   * @param uid The user's unique identifier\n   *\n   * This function should only be called on a server. Never expose your `service_role` key in the browser.\n   */\n  async getUserById(\n    uid: string\n  ): Promise<{ data: null; error: ApiError } | { data: User; error: null }> {\n    try {\n      const data: any = await get(this.fetch, `${this.url}/admin/users/${uid}`, {\n        headers: this.headers,\n      })\n      return { data, error: null }\n    } catch (e) {\n      return { data: null, error: e as ApiError }\n    }\n  }\n\n  /**\n   * Get user by reading the cookie from the request.\n   * Works for Next.js & Express (requires cookie-parser middleware).\n   */\n  async getUserByCookie(\n    req: any,\n    res?: any\n  ): Promise<{\n    token: string | null\n    user: User | null\n    data: User | null\n    error: ApiError | null\n  }> {\n    try {\n      if (!req.cookies) {\n        throw new Error(\n          'Not able to parse cookies! When using Express make sure the cookie-parser middleware is in use!'\n        )\n      }\n\n      const access_token = req.cookies[`${this.cookieName()}-access-token`]\n      const refresh_token = req.cookies[`${this.cookieName()}-refresh-token`]\n\n      if (!access_token) {\n        throw new Error('No cookie found!')\n      }\n\n      const { user, error: getUserError } = await this.getUser(access_token)\n      if (getUserError) {\n        if (!refresh_token) throw new Error('No refresh_token cookie found!')\n        if (!res)\n          throw new Error('You need to pass the res object to automatically refresh the session!')\n        const { data, error } = await this.refreshAccessToken(refresh_token)\n        if (error) {\n          throw error\n        } else if (data) {\n          setCookies(\n            req,\n            res,\n            [\n              { key: 'access-token', value: data.access_token },\n              { key: 'refresh-token', value: data.refresh_token! },\n            ].map((token) => ({\n              name: `${this.cookieName()}-${token.key}`,\n              value: token.value,\n              domain: this.cookieOptions.domain,\n              maxAge: this.cookieOptions.lifetime ?? 0,\n              path: this.cookieOptions.path,\n              sameSite: this.cookieOptions.sameSite,\n            }))\n          )\n          return { token: data.access_token, user: data.user, data: data.user, error: null }\n        }\n      }\n      return { token: access_token, user: user, data: user, error: null }\n    } catch (e) {\n      return { token: null, user: null, data: null, error: e as ApiError }\n    }\n  }\n\n  /**\n   * Updates the user data.\n   *\n   * @param attributes The data you want to update.\n   *\n   * This function should only be called on a server. Never expose your `service_role` key in the browser.\n   */\n  async updateUserById(\n    uid: string,\n    attributes: AdminUserAttributes\n  ): Promise<{ user: User | null; data: User | null; error: ApiError | null }> {\n    try {\n      this //\n      const data: any = await put(this.fetch, `${this.url}/admin/users/${uid}`, attributes, {\n        headers: this.headers,\n      })\n      return { user: data, data, error: null }\n    } catch (e) {\n      return { user: null, data: null, error: e as ApiError }\n    }\n  }\n\n  /**\n   * Delete a user. Requires a `service_role` key.\n   *\n   * This function should only be called on a server. Never expose your `service_role` key in the browser.\n   *\n   * @param uid The user uid you want to remove.\n   */\n  async deleteUser(\n    uid: string\n  ): Promise<{ user: User | null; data: User | null; error: ApiError | null }> {\n    try {\n      const data: any = await remove(\n        this.fetch,\n        `${this.url}/admin/users/${uid}`,\n        {},\n        {\n          headers: this.headers,\n        }\n      )\n      return { user: data, data, error: null }\n    } catch (e) {\n      return { user: null, data: null, error: e as ApiError }\n    }\n  }\n\n  /**\n   * Gets the current user details.\n   *\n   * This method is called by the GoTrueClient `update` where\n   * the jwt is set to this.currentSession.access_token\n   * and therefore, acts like getting the currently authenticated user\n   *\n   * @param jwt A valid, logged-in JWT. Typically, the access_token for the currentSession\n   */\n  async getUser(\n    jwt: string\n  ): Promise<{ user: User | null; data: User | null; error: ApiError | null }> {\n    try {\n      const data: any = await get(this.fetch, `${this.url}/user`, {\n        headers: this._createRequestHeaders(jwt),\n      })\n      return { user: data, data, error: null }\n    } catch (e) {\n      return { user: null, data: null, error: e as ApiError }\n    }\n  }\n\n  /**\n   * Updates the user data.\n   * @param jwt A valid, logged-in JWT.\n   * @param attributes The data you want to update.\n   */\n  async updateUser(\n    jwt: string,\n    attributes: UserAttributes\n  ): Promise<{ user: User | null; data: User | null; error: ApiError | null }> {\n    try {\n      const data: any = await put(this.fetch, `${this.url}/user`, attributes, {\n        headers: this._createRequestHeaders(jwt),\n      })\n      return { user: data, data, error: null }\n    } catch (e) {\n      return { user: null, data: null, error: e as ApiError }\n    }\n  }\n}\n", "/**\n * https://mathiasbynens.be/notes/globalthis\n */\nexport function polyfillGlobalThis() {\n  if (typeof globalThis === 'object') return\n  try {\n    Object.defineProperty(Object.prototype, '__magic__', {\n      get: function () {\n        return this\n      },\n      configurable: true,\n    })\n    // @ts-expect-error 'Allow access to magic'\n    __magic__.globalThis = __magic__\n    // @ts-expect-error 'Allow access to magic'\n    delete Object.prototype.__magic__\n  } catch (e) {\n    if (typeof self !== 'undefined') {\n      // @ts-expect-error 'Allow access to globals'\n      self.globalThis = self\n    }\n  }\n}\n", "import GoTrueApi from './GoTrueApi'\nimport {\n  isBrowser,\n  getParameterByName,\n  uuid,\n  setItemAsync,\n  removeItemAsync,\n  getItemSynchronously,\n  getItemAsync,\n} from './lib/helpers'\nimport {\n  GOTRUE_URL,\n  DEFAULT_HEADERS,\n  STORAGE_KEY,\n  EXPIRY_MARGIN,\n  NETWORK_FAILURE,\n} from './lib/constants'\nimport { polyfillGlobalThis } from './lib/polyfills'\nimport { Fetch } from './lib/fetch'\n\nimport type {\n  ApiError,\n  Session,\n  User,\n  UserAttributes,\n  Provider,\n  Subscription,\n  AuthChangeEvent,\n  CookieOptions,\n  UserCredentials,\n  VerifyOTPParams,\n  OpenIDConnectCredentials,\n  SupportedStorage,\n} from './lib/types'\n\npolyfillGlobalThis() // Make \"globalThis\" available\n\nconst DEFAULT_OPTIONS = {\n  url: GOTRUE_URL,\n  autoRefreshToken: true,\n  persistSession: true,\n  detectSessionInUrl: true,\n  multiTab: true,\n  headers: DEFAULT_HEADERS,\n}\n\nconst decodeBase64URL = (value: string): string => {\n  try {\n    // atob is present in all browsers and nodejs >= 16\n    // but if it is not it will throw a ReferenceError in which case we can try to use Buffer\n    // replace are here to convert the Base64-URL into Base64 which is what atob supports\n    // replace with //g regex acts like replaceAll\n    return atob(value.replace(/[-]/g, '+').replace(/[_]/g, '/'))\n  } catch (e) {\n    if (e instanceof ReferenceError) {\n      // running on nodejs < 16\n      // Buffer supports Base64-URL transparently\n      return Buffer.from(value, 'base64').toString('utf-8')\n    } else {\n      throw e\n    }\n  }\n}\n\nexport default class GoTrueClient {\n  /**\n   * Namespace for the GoTrue API methods.\n   * These can be used for example to get a user from a JWT in a server environment or reset a user's password.\n   */\n  api: GoTrueApi\n  /**\n   * The currently logged in user or null.\n   */\n  protected currentUser: User | null\n  /**\n   * The session object for the currently logged in user or null.\n   */\n  protected currentSession: Session | null\n\n  protected autoRefreshToken: boolean\n  protected persistSession: boolean\n  protected localStorage: SupportedStorage\n  protected multiTab: boolean\n  protected stateChangeEmitters: Map<string, Subscription> = new Map()\n  protected refreshTokenTimer?: ReturnType<typeof setTimeout>\n  protected networkRetries: number = 0\n\n  /**\n   * Create a new client for use in the browser.\n   * @param options.url The URL of the GoTrue server.\n   * @param options.headers Any additional headers to send to the GoTrue server.\n   * @param options.detectSessionInUrl Set to \"true\" if you want to automatically detects OAuth grants in the URL and signs in the user.\n   * @param options.autoRefreshToken Set to \"true\" if you want to automatically refresh the token before expiring.\n   * @param options.persistSession Set to \"true\" if you want to automatically save the user session into local storage.\n   * @param options.localStorage Provide your own local storage implementation to use instead of the browser's local storage.\n   * @param options.multiTab Set to \"false\" if you want to disable multi-tab/window events.\n   * @param options.cookieOptions\n   * @param options.fetch A custom fetch implementation.\n   */\n  constructor(options: {\n    url?: string\n    headers?: { [key: string]: string }\n    detectSessionInUrl?: boolean\n    autoRefreshToken?: boolean\n    persistSession?: boolean\n    localStorage?: SupportedStorage\n    multiTab?: boolean\n    cookieOptions?: CookieOptions\n    fetch?: Fetch\n  }) {\n    const settings = { ...DEFAULT_OPTIONS, ...options }\n    this.currentUser = null\n    this.currentSession = null\n    this.autoRefreshToken = settings.autoRefreshToken\n    this.persistSession = settings.persistSession\n    this.multiTab = settings.multiTab\n    this.localStorage = settings.localStorage || globalThis.localStorage\n    this.api = new GoTrueApi({\n      url: settings.url,\n      headers: settings.headers,\n      cookieOptions: settings.cookieOptions,\n      fetch: settings.fetch,\n    })\n    this._recoverSession()\n    this._recoverAndRefresh()\n    this._listenForMultiTabEvents()\n    this._handleVisibilityChange()\n\n    if (settings.detectSessionInUrl && isBrowser() && !!getParameterByName('access_token')) {\n      // Handle the OAuth redirect\n      this.getSessionFromUrl({ storeSession: true }).then(({ error }) => {\n        if (error) {\n          throw new Error('Error getting session from URL.')\n        }\n      })\n    }\n  }\n\n  /**\n   * Creates a new user.\n   * @type UserCredentials\n   * @param email The user's email address.\n   * @param password The user's password.\n   * @param phone The user's phone number.\n   * @param redirectTo The redirect URL attached to the signup confirmation link. Does not redirect the user if it's a mobile signup.\n   * @param data Optional user metadata.\n   */\n  async signUp(\n    { email, password, phone }: UserCredentials,\n    options: {\n      redirectTo?: string\n      data?: object\n      captchaToken?: string\n    } = {}\n  ): Promise<{\n    user: User | null\n    session: Session | null\n    error: ApiError | null\n  }> {\n    try {\n      this._removeSession()\n\n      const { data, error } =\n        phone && password\n          ? await this.api.signUpWithPhone(phone!, password!, {\n              data: options.data,\n              captchaToken: options.captchaToken,\n            })\n          : await this.api.signUpWithEmail(email!, password!, {\n              redirectTo: options.redirectTo,\n              data: options.data,\n              captchaToken: options.captchaToken,\n            })\n\n      if (error) {\n        throw error\n      }\n\n      if (!data) {\n        throw 'An error occurred on sign up.'\n      }\n\n      let session: Session | null = null\n      let user: User | null = null\n\n      if ((data as Session).access_token) {\n        session = data as Session\n        user = session.user as User\n        this._saveSession(session)\n        this._notifyAllSubscribers('SIGNED_IN')\n      }\n\n      if ((data as User).id) {\n        user = data as User\n      }\n\n      return { user, session, error: null }\n    } catch (e) {\n      return { user: null, session: null, error: e as ApiError }\n    }\n  }\n\n  /**\n   * Log in an existing user, or login via a third-party provider.\n   * @type UserCredentials\n   * @param email The user's email address.\n   * @param phone The user's phone number.\n   * @param password The user's password.\n   * @param refreshToken A valid refresh token that was returned on login.\n   * @param provider One of the providers supported by GoTrue.\n   * @param redirectTo A URL to send the user to after they are confirmed (OAuth logins only).\n   * @param shouldCreateUser A boolean flag to indicate whether to automatically create a user on magiclink / otp sign-ins if the user doesn't exist. Defaults to true.\n   * @param scopes A space-separated list of scopes granted to the OAuth application.\n   */\n  async signIn(\n    { email, phone, password, refreshToken, provider, oidc }: UserCredentials,\n    options: {\n      redirectTo?: string\n      shouldCreateUser?: boolean\n      scopes?: string\n      captchaToken?: string\n      queryParams?: { [key: string]: string }\n    } = {}\n  ): Promise<{\n    session: Session | null\n    user: User | null\n    provider?: Provider\n    url?: string | null\n    error: ApiError | null\n  }> {\n    try {\n      this._removeSession()\n\n      if (email && !password) {\n        const { error } = await this.api.sendMagicLinkEmail(email, {\n          redirectTo: options.redirectTo,\n          shouldCreateUser: options.shouldCreateUser,\n          captchaToken: options.captchaToken,\n        })\n        return { user: null, session: null, error }\n      }\n      if (email && password) {\n        return this._handleEmailSignIn(email, password, {\n          redirectTo: options.redirectTo,\n          captchaToken: options.captchaToken,\n        })\n      }\n      if (phone && !password) {\n        const { error } = await this.api.sendMobileOTP(phone, {\n          shouldCreateUser: options.shouldCreateUser,\n          captchaToken: options.captchaToken,\n        })\n        return { user: null, session: null, error }\n      }\n      if (phone && password) {\n        return this._handlePhoneSignIn(phone, password)\n      }\n      if (refreshToken) {\n        // currentSession and currentUser will be updated to latest on _callRefreshToken using the passed refreshToken\n        const { error } = await this._callRefreshToken(refreshToken)\n        if (error) throw error\n\n        return {\n          user: this.currentUser,\n          session: this.currentSession,\n          error: null,\n        }\n      }\n      if (provider) {\n        return this._handleProviderSignIn(provider, {\n          redirectTo: options.redirectTo,\n          scopes: options.scopes,\n          queryParams: options.queryParams,\n        })\n      }\n      if (oidc) {\n        return this._handleOpenIDConnectSignIn(oidc)\n      }\n      throw new Error(\n        `You must provide either an email, phone number, a third-party provider or OpenID Connect.`\n      )\n    } catch (e) {\n      return { user: null, session: null, error: e as ApiError }\n    }\n  }\n\n  /**\n   * Log in a user given a User supplied OTP received via mobile.\n   * @param email The user's email address.\n   * @param phone The user's phone number.\n   * @param token The user's password.\n   * @param type The user's verification type.\n   * @param redirectTo A URL or mobile address to send the user to after they are confirmed.\n   */\n  async verifyOTP(\n    params: VerifyOTPParams,\n    options: {\n      redirectTo?: string\n    } = {}\n  ): Promise<{\n    user: User | null\n    session: Session | null\n    error: ApiError | null\n  }> {\n    try {\n      this._removeSession()\n\n      const { data, error } = await this.api.verifyOTP(params, options)\n\n      if (error) {\n        throw error\n      }\n\n      if (!data) {\n        throw 'An error occurred on token verification.'\n      }\n\n      let session: Session | null = null\n      let user: User | null = null\n\n      if ((data as Session).access_token) {\n        session = data as Session\n        user = session.user as User\n        this._saveSession(session)\n        this._notifyAllSubscribers('SIGNED_IN')\n      }\n\n      if ((data as User).id) {\n        user = data as User\n      }\n\n      return { user, session, error: null }\n    } catch (e) {\n      return { user: null, session: null, error: e as ApiError }\n    }\n  }\n\n  /**\n   * Inside a browser context, `user()` will return the user data, if there is a logged in user.\n   *\n   * For server-side management, you can get a user through `auth.api.getUserByCookie()`\n   */\n  user(): User | null {\n    return this.currentUser\n  }\n\n  /**\n   * Returns the session data, if there is an active session.\n   */\n  session(): Session | null {\n    return this.currentSession\n  }\n\n  /**\n   * Force refreshes the session including the user data in case it was updated in a different session.\n   */\n  async refreshSession(): Promise<{\n    data: Session | null\n    user: User | null\n    error: ApiError | null\n  }> {\n    try {\n      if (!this.currentSession?.access_token) throw new Error('Not logged in.')\n\n      // currentSession and currentUser will be updated to latest on _callRefreshToken\n      const { error } = await this._callRefreshToken()\n      if (error) throw error\n\n      return { data: this.currentSession, user: this.currentUser, error: null }\n    } catch (e) {\n      return { data: null, user: null, error: e as ApiError }\n    }\n  }\n\n  /**\n   * Updates user data, if there is a logged in user.\n   */\n  async update(\n    attributes: UserAttributes\n  ): Promise<{ data: User | null; user: User | null; error: ApiError | null }> {\n    try {\n      if (!this.currentSession?.access_token) throw new Error('Not logged in.')\n\n      const { user, error } = await this.api.updateUser(\n        this.currentSession.access_token,\n        attributes\n      )\n      if (error) throw error\n      if (!user) throw Error('Invalid user data.')\n\n      const session = { ...this.currentSession, user }\n      this._saveSession(session)\n      this._notifyAllSubscribers('USER_UPDATED')\n\n      return { data: user, user, error: null }\n    } catch (e) {\n      return { data: null, user: null, error: e as ApiError }\n    }\n  }\n\n  /**\n   * Sets the session from the provided session information. The access_token\n   * is reused if it is not expired, otherwise a new access token is fetched by\n   * refreshing the session with the provided refresh_token.\n   *\n   * This method is useful when using in a server-side rendered context.\n   *\n   * @param params.refresh_token A valid refresh token (typically obtained from a cookie)\n   * @param params.access_token An access token (typically obtained from a cookie)\n   */\n  async setSession(params: {\n    refresh_token: string\n    access_token: string\n  }): Promise<{ session: Session | null; error: ApiError | null }>\n\n  /**\n   * Sets the session data from refresh_token and returns current Session and Error\n   * @param refresh_token a JWT token\n   */\n  async setSession(\n    refresh_token: string\n  ): Promise<{ session: Session | null; error: ApiError | null }>\n\n  async setSession(\n    arg0: string | { access_token: string; refresh_token: string }\n  ): Promise<{ session: Session | null; error: ApiError | null }> {\n    let session: Session\n\n    if (typeof arg0 === 'string') {\n      // using the refresh_token string API\n      const refresh_token = arg0\n\n      const { data, error } = await this.api.refreshAccessToken(refresh_token)\n      if (error) {\n        return { session: null, error: error }\n      }\n\n      session = data!\n    } else {\n      // using the object parameter API\n\n      const timeNow = Math.round(Date.now() / 1000)\n\n      let { refresh_token, access_token } = arg0\n      let expires_at = 0\n      let expires_in = 0\n\n      const tokenParts = access_token.split('.')\n      if (tokenParts.length !== 3) throw new Error('access_token is not a proper JWT')\n\n      const bodyJSON = decodeBase64URL(tokenParts[1])\n\n      let parsed: any = undefined\n      try {\n        parsed = JSON.parse(bodyJSON)\n      } catch (e) {\n        throw new Error('access_token is not a proper JWT, invalid JSON in body')\n      }\n\n      if (typeof parsed === 'object' && parsed && typeof parsed.exp === 'number') {\n        expires_at = parsed.exp\n        expires_in = timeNow - parsed.exp\n      } else {\n        throw new Error('access_token is not a proper JWT, missing exp claim')\n      }\n\n      if (timeNow > expires_at) {\n        const { data, error } = await this.api.refreshAccessToken(refresh_token)\n        if (error) {\n          return { session: null, error: error }\n        }\n\n        session = data!\n      } else {\n        const { user, error } = await this.api.getUser(access_token)\n        if (error) throw error\n\n        session = {\n          access_token,\n          expires_in,\n          expires_at,\n          refresh_token,\n          token_type: 'bearer',\n          user: user!,\n        }\n      }\n    }\n\n    try {\n      this._saveSession(session)\n      this._notifyAllSubscribers('SIGNED_IN')\n      return { session, error: null }\n    } catch (e) {\n      return { error: e as ApiError, session: null }\n    }\n  }\n\n  /**\n   * Overrides the JWT on the current client. The JWT will then be sent in all subsequent network requests.\n   * @param access_token a jwt access token\n   */\n  setAuth(access_token: string): Session {\n    this.currentSession = {\n      ...this.currentSession,\n      access_token,\n      token_type: 'bearer',\n      user: this.user(),\n    }\n\n    this._notifyAllSubscribers('TOKEN_REFRESHED')\n\n    return this.currentSession\n  }\n\n  /**\n   * Gets the session data from a URL string\n   * @param options.storeSession Optionally store the session in the browser\n   */\n  async getSessionFromUrl(options?: {\n    storeSession?: boolean\n  }): Promise<{ data: Session | null; error: ApiError | null }> {\n    try {\n      if (!isBrowser()) throw new Error('No browser detected.')\n\n      const error_description = getParameterByName('error_description')\n      if (error_description) throw new Error(error_description)\n\n      const provider_token = getParameterByName('provider_token')\n      const provider_refresh_token = getParameterByName('provider_refresh_token')\n      const access_token = getParameterByName('access_token')\n      if (!access_token) throw new Error('No access_token detected.')\n      const expires_in = getParameterByName('expires_in')\n      if (!expires_in) throw new Error('No expires_in detected.')\n      const refresh_token = getParameterByName('refresh_token')\n      if (!refresh_token) throw new Error('No refresh_token detected.')\n      const token_type = getParameterByName('token_type')\n      if (!token_type) throw new Error('No token_type detected.')\n\n      const timeNow = Math.round(Date.now() / 1000)\n      const expires_at = timeNow + parseInt(expires_in)\n\n      const { user, error } = await this.api.getUser(access_token)\n      if (error) throw error\n\n      const session: Session = {\n        provider_token,\n        provider_refresh_token,\n        access_token,\n        expires_in: parseInt(expires_in),\n        expires_at,\n        refresh_token,\n        token_type,\n        user: user!,\n      }\n      if (options?.storeSession) {\n        this._saveSession(session)\n        const recoveryMode = getParameterByName('type')\n        this._notifyAllSubscribers('SIGNED_IN')\n        if (recoveryMode === 'recovery') {\n          this._notifyAllSubscribers('PASSWORD_RECOVERY')\n        }\n      }\n      // Remove tokens from URL\n      window.location.hash = ''\n\n      return { data: session, error: null }\n    } catch (e) {\n      return { data: null, error: e as ApiError }\n    }\n  }\n\n  /**\n   * Inside a browser context, `signOut()` will remove the logged in user from the browser session\n   * and log them out - removing all items from localstorage and then trigger a \"SIGNED_OUT\" event.\n   *\n   * For server-side management, you can revoke all refresh tokens for a user by passing a user's JWT through to `auth.api.signOut(JWT: string)`. There is no way to revoke a user's session JWT before it automatically expires\n   */\n  async signOut(): Promise<{ error: ApiError | null }> {\n    const accessToken = this.currentSession?.access_token\n    this._removeSession()\n    this._notifyAllSubscribers('SIGNED_OUT')\n    if (accessToken) {\n      const { error } = await this.api.signOut(accessToken)\n      if (error) return { error }\n    }\n    return { error: null }\n  }\n\n  /**\n   * Receive a notification every time an auth event happens.\n   * @returns {Subscription} A subscription object which can be used to unsubscribe itself.\n   */\n  onAuthStateChange(callback: (event: AuthChangeEvent, session: Session | null) => void): {\n    data: Subscription | null\n    error: ApiError | null\n  } {\n    try {\n      const id: string = uuid()\n      const subscription: Subscription = {\n        id,\n        callback,\n        unsubscribe: () => {\n          this.stateChangeEmitters.delete(id)\n        },\n      }\n      this.stateChangeEmitters.set(id, subscription)\n      return { data: subscription, error: null }\n    } catch (e) {\n      return { data: null, error: e as ApiError }\n    }\n  }\n\n  private async _handleEmailSignIn(\n    email: string,\n    password: string,\n    options: {\n      redirectTo?: string\n      captchaToken?: string\n    } = {}\n  ) {\n    try {\n      const { data, error } = await this.api.signInWithEmail(email, password, {\n        redirectTo: options.redirectTo,\n        captchaToken: options.captchaToken,\n      })\n      if (error || !data) return { data: null, user: null, session: null, error }\n\n      if (data?.user?.confirmed_at || data?.user?.email_confirmed_at) {\n        this._saveSession(data)\n        this._notifyAllSubscribers('SIGNED_IN')\n      }\n\n      return { data, user: data.user, session: data, error: null }\n    } catch (e) {\n      return { data: null, user: null, session: null, error: e as ApiError }\n    }\n  }\n\n  private async _handlePhoneSignIn(\n    phone: string,\n    password: string,\n    options: {\n      captchaToken?: string\n    } = {}\n  ) {\n    try {\n      const { data, error } = await this.api.signInWithPhone(phone, password, options)\n      if (error || !data) return { data: null, user: null, session: null, error }\n\n      if (data?.user?.phone_confirmed_at) {\n        this._saveSession(data)\n        this._notifyAllSubscribers('SIGNED_IN')\n      }\n\n      return { data, user: data.user, session: data, error: null }\n    } catch (e) {\n      return { data: null, user: null, session: null, error: e as ApiError }\n    }\n  }\n\n  private _handleProviderSignIn(\n    provider: Provider,\n    options: {\n      redirectTo?: string\n      scopes?: string\n      queryParams?: { [key: string]: string }\n    } = {}\n  ) {\n    const url: string = this.api.getUrlForProvider(provider, {\n      redirectTo: options.redirectTo,\n      scopes: options.scopes,\n      queryParams: options.queryParams,\n    })\n\n    try {\n      // try to open on the browser\n      if (isBrowser()) {\n        window.location.href = url\n      }\n      return { provider, url, data: null, session: null, user: null, error: null }\n    } catch (e) {\n      // fallback to returning the URL\n      if (url) return { provider, url, data: null, session: null, user: null, error: null }\n      return { data: null, user: null, session: null, error: e as ApiError }\n    }\n  }\n\n  private async _handleOpenIDConnectSignIn({\n    id_token,\n    nonce,\n    client_id,\n    issuer,\n    provider,\n  }: OpenIDConnectCredentials): Promise<{\n    session: Session | null\n    user: User | null\n    error: ApiError | null\n  }> {\n    if (id_token && nonce && ((client_id && issuer) || provider)) {\n      try {\n        const { data, error } = await this.api.signInWithOpenIDConnect({\n          id_token,\n          nonce,\n          client_id,\n          issuer,\n          provider,\n        })\n        if (error || !data) return { user: null, session: null, error }\n        this._saveSession(data)\n        this._notifyAllSubscribers('SIGNED_IN')\n        return { user: data.user, session: data, error: null }\n      } catch (e) {\n        return { user: null, session: null, error: e as ApiError }\n      }\n    }\n    throw new Error(`You must provide a OpenID Connect provider with your id token and nonce.`)\n  }\n\n  /**\n   * Attempts to get the session from LocalStorage\n   * Note: this should never be async (even for React Native), as we need it to return immediately in the constructor.\n   */\n  private _recoverSession() {\n    try {\n      const data = getItemSynchronously(this.localStorage, STORAGE_KEY)\n      if (!data) return null\n      const { currentSession, expiresAt } = data\n      const timeNow = Math.round(Date.now() / 1000)\n\n      if (expiresAt >= timeNow + EXPIRY_MARGIN && currentSession?.user) {\n        this._saveSession(currentSession)\n        this._notifyAllSubscribers('SIGNED_IN')\n      }\n    } catch (error) {\n      console.log('error', error)\n    }\n  }\n\n  /**\n   * Recovers the session from LocalStorage and refreshes\n   * Note: this method is async to accommodate for AsyncStorage e.g. in React native.\n   */\n  private async _recoverAndRefresh() {\n    try {\n      const data = await getItemAsync(this.localStorage, STORAGE_KEY)\n      if (!data) return null\n      const { currentSession, expiresAt } = data\n      const timeNow = Math.round(Date.now() / 1000)\n\n      if (expiresAt < timeNow + EXPIRY_MARGIN) {\n        if (this.autoRefreshToken && currentSession.refresh_token) {\n          this.networkRetries++\n          const { error } = await this._callRefreshToken(currentSession.refresh_token)\n          if (error) {\n            console.log(error.message)\n            if (\n              error.message === NETWORK_FAILURE.ERROR_MESSAGE &&\n              this.networkRetries < NETWORK_FAILURE.MAX_RETRIES\n            ) {\n              if (this.refreshTokenTimer) clearTimeout(this.refreshTokenTimer)\n              this.refreshTokenTimer = setTimeout(\n                () => this._recoverAndRefresh(),\n                NETWORK_FAILURE.RETRY_INTERVAL ** this.networkRetries * 100 // exponential backoff\n              )\n              return\n            }\n            await this._removeSession()\n          }\n          this.networkRetries = 0\n        } else {\n          this._removeSession()\n        }\n      } else if (!currentSession) {\n        console.log('Current session is missing data.')\n        this._removeSession()\n      } else {\n        // should be handled on _recoverSession method already\n        // But we still need the code here to accommodate for AsyncStorage e.g. in React native\n        this._saveSession(currentSession)\n        this._notifyAllSubscribers('SIGNED_IN')\n      }\n    } catch (err) {\n      console.error(err)\n      return null\n    }\n  }\n\n  private async _callRefreshToken(refresh_token = this.currentSession?.refresh_token) {\n    try {\n      if (!refresh_token) {\n        throw new Error('No current session.')\n      }\n      const { data, error } = await this.api.refreshAccessToken(refresh_token)\n      if (error) throw error\n      if (!data) throw Error('Invalid session data.')\n\n      this._saveSession(data)\n      this._notifyAllSubscribers('TOKEN_REFRESHED')\n      this._notifyAllSubscribers('SIGNED_IN')\n\n      return { data, error: null }\n    } catch (e) {\n      return { data: null, error: e as ApiError }\n    }\n  }\n\n  private _notifyAllSubscribers(event: AuthChangeEvent) {\n    this.stateChangeEmitters.forEach((x) => x.callback(event, this.currentSession))\n  }\n\n  /**\n   * set currentSession and currentUser\n   * process to _startAutoRefreshToken if possible\n   */\n  private _saveSession(session: Session) {\n    this.currentSession = session\n    this.currentUser = session.user\n\n    const expiresAt = session.expires_at\n    if (expiresAt) {\n      const timeNow = Math.round(Date.now() / 1000)\n      const expiresIn = expiresAt - timeNow\n      const refreshDurationBeforeExpires = expiresIn > EXPIRY_MARGIN ? EXPIRY_MARGIN : 0.5\n      this._startAutoRefreshToken((expiresIn - refreshDurationBeforeExpires) * 1000)\n    }\n\n    // Do we need any extra check before persist session\n    // access_token or user ?\n    if (this.persistSession && session.expires_at) {\n      this._persistSession(this.currentSession)\n    }\n  }\n\n  private _persistSession(currentSession: Session) {\n    const data = { currentSession, expiresAt: currentSession.expires_at }\n    setItemAsync(this.localStorage, STORAGE_KEY, data)\n  }\n\n  private async _removeSession() {\n    this.currentSession = null\n    this.currentUser = null\n    if (this.refreshTokenTimer) clearTimeout(this.refreshTokenTimer)\n    removeItemAsync(this.localStorage, STORAGE_KEY)\n  }\n\n  /**\n   * Clear and re-create refresh token timer\n   * @param value time intervals in milliseconds\n   */\n  private _startAutoRefreshToken(value: number) {\n    if (this.refreshTokenTimer) clearTimeout(this.refreshTokenTimer)\n    if (value <= 0 || !this.autoRefreshToken) return\n\n    this.refreshTokenTimer = setTimeout(async () => {\n      this.networkRetries++\n      const { error } = await this._callRefreshToken()\n      if (!error) this.networkRetries = 0\n      if (\n        error?.message === NETWORK_FAILURE.ERROR_MESSAGE &&\n        this.networkRetries < NETWORK_FAILURE.MAX_RETRIES\n      )\n        this._startAutoRefreshToken(NETWORK_FAILURE.RETRY_INTERVAL ** this.networkRetries * 100) // exponential backoff\n    }, value)\n    if (typeof this.refreshTokenTimer.unref === 'function') this.refreshTokenTimer.unref()\n  }\n\n  /**\n   * Listens for changes to LocalStorage and updates the current session.\n   */\n  private _listenForMultiTabEvents() {\n    if (!this.multiTab || !isBrowser() || !window?.addEventListener) {\n      return false\n    }\n\n    try {\n      window?.addEventListener('storage', (e: StorageEvent) => {\n        if (e.key === STORAGE_KEY) {\n          const newSession = JSON.parse(String(e.newValue))\n          if (newSession?.currentSession?.access_token) {\n            this._saveSession(newSession.currentSession)\n            this._notifyAllSubscribers('SIGNED_IN')\n          } else {\n            this._removeSession()\n            this._notifyAllSubscribers('SIGNED_OUT')\n          }\n        }\n      })\n    } catch (error) {\n      console.error('_listenForMultiTabEvents', error)\n    }\n  }\n\n  private _handleVisibilityChange() {\n    if (!this.multiTab || !isBrowser() || !window?.addEventListener) {\n      return false\n    }\n\n    try {\n      window?.addEventListener('visibilitychange', () => {\n        if (document.visibilityState === 'visible') {\n          this._recoverAndRefresh()\n        }\n      })\n    } catch (error) {\n      console.error('_handleVisibilityChange', error)\n    }\n  }\n}\n", "import { GoTrueClient } from '@supabase/gotrue-js'\nimport { SupabaseAuthClientOptions } from './types'\n\nexport class SupabaseAuthClient extends GoTrueClient {\n  constructor(options: SupabaseAuthClientOptions) {\n    super(options)\n  }\n}\n", "export type Fetch = typeof fetch\n\n/**\n * Error format\n *\n * {@link https://postgrest.org/en/stable/api.html?highlight=options#errors-and-http-status-codes}\n */\nexport type PostgrestError = {\n  message: string\n  details: string\n  hint: string\n  code: string\n}\n\n/**\n * Response format\n *\n * {@link https://github.com/supabase/supabase-js/issues/32}\n */\ninterface PostgrestResponseBase {\n  status: number\n  statusText: string\n}\n\ninterface PostgrestResponseSuccess<T> extends PostgrestResponseBase {\n  error: null\n  data: T[]\n  body: T[]\n  count: number | null\n}\ninterface PostgrestResponseFailure extends PostgrestResponseBase {\n  error: PostgrestError\n  data: null\n  // For backward compatibility: body === data\n  body: null\n  count: null\n}\nexport type PostgrestResponse<T> = PostgrestResponseSuccess<T> | PostgrestResponseFailure\n\ninterface PostgrestSingleResponseSuccess<T> extends PostgrestResponseBase {\n  error: null\n  data: T\n  // For backward compatibility: body === data\n  body: T\n}\nexport type PostgrestSingleResponse<T> =\n  | PostgrestSingleResponseSuccess<T>\n  | PostgrestResponseFailure\nexport type PostgrestMaybeSingleResponse<T> = PostgrestSingleResponse<T | null>\n\nexport abstract class PostgrestBuilder<T> implements PromiseLike<PostgrestResponse<T>> {\n  protected method!: 'GET' | 'HEAD' | 'POST' | 'PATCH' | 'DELETE'\n  protected url!: URL\n  protected headers!: { [key: string]: string }\n  protected schema?: string\n  protected body?: Partial<T> | Partial<T>[]\n  protected shouldThrowOnError: boolean\n  protected signal?: AbortSignal\n  protected fetch: Fetch\n  protected allowEmpty: boolean\n\n  constructor(builder: PostgrestBuilder<T>) {\n    Object.assign(this, builder)\n    let _fetch: Fetch\n    if (builder.fetch) {\n      _fetch = builder.fetch\n    } else if (typeof fetch === 'undefined') {\n      _fetch = async (...args) => await (await import('cross-fetch')).fetch(...args)\n    } else {\n      _fetch = fetch\n    }\n    this.fetch = (...args) => _fetch(...args)\n    this.shouldThrowOnError = builder.shouldThrowOnError || false\n    this.allowEmpty = builder.allowEmpty || false\n  }\n\n  /**\n   * If there's an error with the query, throwOnError will reject the promise by\n   * throwing the error instead of returning it as part of a successful response.\n   *\n   * {@link https://github.com/supabase/supabase-js/issues/92}\n   */\n  throwOnError(throwOnError?: boolean): this {\n    if (throwOnError === null || throwOnError === undefined) {\n      throwOnError = true\n    }\n    this.shouldThrowOnError = throwOnError\n    return this\n  }\n\n  then<TResult1 = PostgrestResponse<T>, TResult2 = never>(\n    onfulfilled?:\n      | ((value: PostgrestResponse<T>) => TResult1 | PromiseLike<TResult1>)\n      | undefined\n      | null,\n    onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null\n  ): PromiseLike<TResult1 | TResult2> {\n    // https://postgrest.org/en/stable/api.html#switching-schemas\n    if (typeof this.schema === 'undefined') {\n      // skip\n    } else if (['GET', 'HEAD'].includes(this.method)) {\n      this.headers['Accept-Profile'] = this.schema\n    } else {\n      this.headers['Content-Profile'] = this.schema\n    }\n    if (this.method !== 'GET' && this.method !== 'HEAD') {\n      this.headers['Content-Type'] = 'application/json'\n    }\n\n    let res = this.fetch(this.url.toString(), {\n      method: this.method,\n      headers: this.headers,\n      body: JSON.stringify(this.body),\n      signal: this.signal,\n    }).then(async (res) => {\n      let error = null\n      let data = null\n      let count = null\n      let status = res.status\n      let statusText = res.statusText\n\n      if (res.ok) {\n        const isReturnMinimal = this.headers['Prefer']?.split(',').includes('return=minimal')\n        if (this.method !== 'HEAD' && !isReturnMinimal) {\n          const text = await res.text()\n          if (!text) {\n            // discard `text`\n          } else if (this.headers['Accept'] === 'text/csv') {\n            data = text\n          } else {\n            data = JSON.parse(text)\n          }\n        }\n\n        const countHeader = this.headers['Prefer']?.match(/count=(exact|planned|estimated)/)\n        const contentRange = res.headers.get('content-range')?.split('/')\n        if (countHeader && contentRange && contentRange.length > 1) {\n          count = parseInt(contentRange[1])\n        }\n      } else {\n        const body = await res.text()\n\n        try {\n          error = JSON.parse(body)\n        } catch {\n          error = {\n            message: body,\n          }\n        }\n\n        if (error && this.allowEmpty && error?.details?.includes('Results contain 0 rows')) {\n          error = null\n          status = 200\n          statusText = 'OK'\n        }\n\n        if (error && this.shouldThrowOnError) {\n          throw error\n        }\n      }\n\n      const postgrestResponse = {\n        error,\n        data,\n        count,\n        status,\n        statusText,\n        body: data,\n      }\n\n      return postgrestResponse\n    })\n    if (!this.shouldThrowOnError) {\n      res = res.catch((fetchError) => ({\n        error: {\n          message: `FetchError: ${fetchError.message}`,\n          details: '',\n          hint: '',\n          code: fetchError.code || '',\n        },\n        data: null,\n        body: null,\n        count: null,\n        status: 400,\n        statusText: 'Bad Request',\n      }))\n    }\n\n    return res.then(onfulfilled, onrejected)\n  }\n}\n", "import { PostgrestBuilder, PostgrestMaybeSingleResponse, PostgrestSingleResponse } from './types'\n\n/**\n * Post-filters (transforms)\n */\n\nexport default class PostgrestTransformBuilder<T> extends PostgrestBuilder<T> {\n  /**\n   * Performs vertical filtering with SELECT.\n   *\n   * @param columns  The columns to retrieve, separated by commas.\n   */\n  select(columns = '*'): this {\n    // Remove whitespaces except when quoted\n    let quoted = false\n    const cleanedColumns = columns\n      .split('')\n      .map((c) => {\n        if (/\\s/.test(c) && !quoted) {\n          return ''\n        }\n        if (c === '\"') {\n          quoted = !quoted\n        }\n        return c\n      })\n      .join('')\n    this.url.searchParams.set('select', cleanedColumns)\n    return this\n  }\n\n  /**\n   * Orders the result with the specified `column`.\n   *\n   * @param column  The column to order on.\n   * @param ascending  If `true`, the result will be in ascending order.\n   * @param nullsFirst  If `true`, `null`s appear first.\n   * @param foreignTable  The foreign table to use (if `column` is a foreign column).\n   */\n  order(\n    column: keyof T,\n    {\n      ascending = true,\n      nullsFirst = false,\n      foreignTable,\n    }: { ascending?: boolean; nullsFirst?: boolean; foreignTable?: string } = {}\n  ): this {\n    const key = typeof foreignTable === 'undefined' ? 'order' : `${foreignTable}.order`\n    const existingOrder = this.url.searchParams.get(key)\n\n    this.url.searchParams.set(\n      key,\n      `${existingOrder ? `${existingOrder},` : ''}${column}.${ascending ? 'asc' : 'desc'}.${\n        nullsFirst ? 'nullsfirst' : 'nullslast'\n      }`\n    )\n    return this\n  }\n\n  /**\n   * Limits the result with the specified `count`.\n   *\n   * @param count  The maximum no. of rows to limit to.\n   * @param foreignTable  The foreign table to use (for foreign columns).\n   */\n  limit(count: number, { foreignTable }: { foreignTable?: string } = {}): this {\n    const key = typeof foreignTable === 'undefined' ? 'limit' : `${foreignTable}.limit`\n    this.url.searchParams.set(key, `${count}`)\n    return this\n  }\n\n  /**\n   * Limits the result to rows within the specified range, inclusive.\n   *\n   * @param from  The starting index from which to limit the result, inclusive.\n   * @param to  The last index to which to limit the result, inclusive.\n   * @param foreignTable  The foreign table to use (for foreign columns).\n   */\n  range(from: number, to: number, { foreignTable }: { foreignTable?: string } = {}): this {\n    const keyOffset = typeof foreignTable === 'undefined' ? 'offset' : `${foreignTable}.offset`\n    const keyLimit = typeof foreignTable === 'undefined' ? 'limit' : `${foreignTable}.limit`\n    this.url.searchParams.set(keyOffset, `${from}`)\n    // Range is inclusive, so add 1\n    this.url.searchParams.set(keyLimit, `${to - from + 1}`)\n    return this\n  }\n\n  /**\n   * Sets the AbortSignal for the fetch request.\n   */\n  abortSignal(signal: AbortSignal): this {\n    this.signal = signal\n    return this\n  }\n\n  /**\n   * Retrieves only one row from the result. Result must be one row (e.g. using\n   * `limit`), otherwise this will result in an error.\n   */\n  single(): PromiseLike<PostgrestSingleResponse<T>> {\n    this.headers['Accept'] = 'application/vnd.pgrst.object+json'\n    return this as PromiseLike<PostgrestSingleResponse<T>>\n  }\n\n  /**\n   * Retrieves at most one row from the result. Result must be at most one row\n   * (e.g. using `eq` on a UNIQUE column), otherwise this will result in an\n   * error.\n   */\n  maybeSingle(): PromiseLike<PostgrestMaybeSingleResponse<T>> {\n    this.headers['Accept'] = 'application/vnd.pgrst.object+json'\n    this.allowEmpty = true\n    return this as PromiseLike<PostgrestMaybeSingleResponse<T>>\n  }\n\n  /**\n   * Set the response type to CSV.\n   */\n  csv(): PromiseLike<PostgrestSingleResponse<string>> {\n    this.headers['Accept'] = 'text/csv'\n    return this as PromiseLike<PostgrestSingleResponse<string>>\n  }\n}\n", "import PostgrestTransformBuilder from './PostgrestTransformBuilder'\n\n/**\n * Filters\n */\n\ntype FilterOperator =\n  | 'eq'\n  | 'neq'\n  | 'gt'\n  | 'gte'\n  | 'lt'\n  | 'lte'\n  | 'like'\n  | 'ilike'\n  | 'is'\n  | 'in'\n  | 'cs'\n  | 'cd'\n  | 'sl'\n  | 'sr'\n  | 'nxl'\n  | 'nxr'\n  | 'adj'\n  | 'ov'\n  | 'fts'\n  | 'plfts'\n  | 'phfts'\n  | 'wfts'\n  | 'not.eq'\n  | 'not.neq'\n  | 'not.gt'\n  | 'not.gte'\n  | 'not.lt'\n  | 'not.lte'\n  | 'not.like'\n  | 'not.ilike'\n  | 'not.is'\n  | 'not.in'\n  | 'not.cs'\n  | 'not.cd'\n  | 'not.sl'\n  | 'not.sr'\n  | 'not.nxl'\n  | 'not.nxr'\n  | 'not.adj'\n  | 'not.ov'\n  | 'not.fts'\n  | 'not.plfts'\n  | 'not.phfts'\n  | 'not.wfts'\n\nexport default class PostgrestFilterBuilder<T> extends PostgrestTransformBuilder<T> {\n  /**\n   * Finds all rows which doesn't satisfy the filter.\n   *\n   * @param column  The column to filter on.\n   * @param operator  The operator to filter with.\n   * @param value  The value to filter with.\n   */\n  not(column: keyof T, operator: FilterOperator, value: any): this {\n    this.url.searchParams.append(`${column}`, `not.${operator}.${value}`)\n    return this\n  }\n\n  /**\n   * Finds all rows satisfying at least one of the filters.\n   *\n   * @param filters  The filters to use, separated by commas.\n   * @param foreignTable  The foreign table to use (if `column` is a foreign column).\n   */\n  or(filters: string, { foreignTable }: { foreignTable?: string } = {}): this {\n    const key = typeof foreignTable === 'undefined' ? 'or' : `${foreignTable}.or`\n    this.url.searchParams.append(key, `(${filters})`)\n    return this\n  }\n\n  /**\n   * Finds all rows whose value on the stated `column` exactly matches the\n   * specified `value`.\n   *\n   * @param column  The column to filter on.\n   * @param value  The value to filter with.\n   */\n  eq(column: keyof T, value: T[keyof T]): this {\n    this.url.searchParams.append(`${column}`, `eq.${value}`)\n    return this\n  }\n\n  /**\n   * Finds all rows whose value on the stated `column` doesn't match the\n   * specified `value`.\n   *\n   * @param column  The column to filter on.\n   * @param value  The value to filter with.\n   */\n  neq(column: keyof T, value: T[keyof T]): this {\n    this.url.searchParams.append(`${column}`, `neq.${value}`)\n    return this\n  }\n\n  /**\n   * Finds all rows whose value on the stated `column` is greater than the\n   * specified `value`.\n   *\n   * @param column  The column to filter on.\n   * @param value  The value to filter with.\n   */\n  gt(column: keyof T, value: T[keyof T]): this {\n    this.url.searchParams.append(`${column}`, `gt.${value}`)\n    return this\n  }\n\n  /**\n   * Finds all rows whose value on the stated `column` is greater than or\n   * equal to the specified `value`.\n   *\n   * @param column  The column to filter on.\n   * @param value  The value to filter with.\n   */\n  gte(column: keyof T, value: T[keyof T]): this {\n    this.url.searchParams.append(`${column}`, `gte.${value}`)\n    return this\n  }\n\n  /**\n   * Finds all rows whose value on the stated `column` is less than the\n   * specified `value`.\n   *\n   * @param column  The column to filter on.\n   * @param value  The value to filter with.\n   */\n  lt(column: keyof T, value: T[keyof T]): this {\n    this.url.searchParams.append(`${column}`, `lt.${value}`)\n    return this\n  }\n\n  /**\n   * Finds all rows whose value on the stated `column` is less than or equal\n   * to the specified `value`.\n   *\n   * @param column  The column to filter on.\n   * @param value  The value to filter with.\n   */\n  lte(column: keyof T, value: T[keyof T]): this {\n    this.url.searchParams.append(`${column}`, `lte.${value}`)\n    return this\n  }\n\n  /**\n   * Finds all rows whose value in the stated `column` matches the supplied\n   * `pattern` (case sensitive).\n   *\n   * @param column  The column to filter on.\n   * @param pattern  The pattern to filter with.\n   */\n  like(column: keyof T, pattern: string): this {\n    this.url.searchParams.append(`${column}`, `like.${pattern}`)\n    return this\n  }\n\n  /**\n   * Finds all rows whose value in the stated `column` matches the supplied\n   * `pattern` (case insensitive).\n   *\n   * @param column  The column to filter on.\n   * @param pattern  The pattern to filter with.\n   */\n  ilike(column: keyof T, pattern: string): this {\n    this.url.searchParams.append(`${column}`, `ilike.${pattern}`)\n    return this\n  }\n\n  /**\n   * A check for exact equality (null, true, false), finds all rows whose\n   * value on the stated `column` exactly match the specified `value`.\n   *\n   * @param column  The column to filter on.\n   * @param value  The value to filter with.\n   */\n  is(column: keyof T, value: boolean | null): this {\n    this.url.searchParams.append(`${column}`, `is.${value}`)\n    return this\n  }\n\n  /**\n   * Finds all rows whose value on the stated `column` is found on the\n   * specified `values`.\n   *\n   * @param column  The column to filter on.\n   * @param values  The values to filter with.\n   */\n  in(column: keyof T, values: T[keyof T][]): this {\n    const cleanedValues = values\n      .map((s) => {\n        // handle postgrest reserved characters\n        // https://postgrest.org/en/v7.0.0/api.html#reserved-characters\n        if (typeof s === 'string' && new RegExp('[,()]').test(s)) return `\"${s}\"`\n        else return `${s}`\n      })\n      .join(',')\n    this.url.searchParams.append(`${column}`, `in.(${cleanedValues})`)\n    return this\n  }\n\n  /**\n   * Finds all rows whose json, array, or range value on the stated `column`\n   * contains the values specified in `value`.\n   *\n   * @param column  The column to filter on.\n   * @param value  The value to filter with.\n   */\n  contains(column: keyof T, value: string | T[keyof T][] | object): this {\n    if (typeof value === 'string') {\n      // range types can be inclusive '[', ']' or exclusive '(', ')' so just\n      // keep it simple and accept a string\n      this.url.searchParams.append(`${column}`, `cs.${value}`)\n    } else if (Array.isArray(value)) {\n      // array\n      this.url.searchParams.append(`${column}`, `cs.{${value.join(',')}}`)\n    } else {\n      // json\n      this.url.searchParams.append(`${column}`, `cs.${JSON.stringify(value)}`)\n    }\n    return this\n  }\n\n  /** @deprecated Use `contains()` instead. */\n  cs = this.contains\n\n  /**\n   * Finds all rows whose json, array, or range value on the stated `column` is\n   * contained by the specified `value`.\n   *\n   * @param column  The column to filter on.\n   * @param value  The value to filter with.\n   */\n  containedBy(column: keyof T, value: string | T[keyof T][] | object): this {\n    if (typeof value === 'string') {\n      // range\n      this.url.searchParams.append(`${column}`, `cd.${value}`)\n    } else if (Array.isArray(value)) {\n      // array\n      this.url.searchParams.append(`${column}`, `cd.{${value.join(',')}}`)\n    } else {\n      // json\n      this.url.searchParams.append(`${column}`, `cd.${JSON.stringify(value)}`)\n    }\n    return this\n  }\n\n  /** @deprecated Use `containedBy()` instead. */\n  cd = this.containedBy\n\n  /**\n   * Finds all rows whose range value on the stated `column` is strictly to the\n   * left of the specified `range`.\n   *\n   * @param column  The column to filter on.\n   * @param range  The range to filter with.\n   */\n  rangeLt(column: keyof T, range: string): this {\n    this.url.searchParams.append(`${column}`, `sl.${range}`)\n    return this\n  }\n\n  /** @deprecated Use `rangeLt()` instead. */\n  sl = this.rangeLt\n\n  /**\n   * Finds all rows whose range value on the stated `column` is strictly to\n   * the right of the specified `range`.\n   *\n   * @param column  The column to filter on.\n   * @param range  The range to filter with.\n   */\n  rangeGt(column: keyof T, range: string): this {\n    this.url.searchParams.append(`${column}`, `sr.${range}`)\n    return this\n  }\n\n  /** @deprecated Use `rangeGt()` instead. */\n  sr = this.rangeGt\n\n  /**\n   * Finds all rows whose range value on the stated `column` does not extend\n   * to the left of the specified `range`.\n   *\n   * @param column  The column to filter on.\n   * @param range  The range to filter with.\n   */\n  rangeGte(column: keyof T, range: string): this {\n    this.url.searchParams.append(`${column}`, `nxl.${range}`)\n    return this\n  }\n\n  /** @deprecated Use `rangeGte()` instead. */\n  nxl = this.rangeGte\n\n  /**\n   * Finds all rows whose range value on the stated `column` does not extend\n   * to the right of the specified `range`.\n   *\n   * @param column  The column to filter on.\n   * @param range  The range to filter with.\n   */\n  rangeLte(column: keyof T, range: string): this {\n    this.url.searchParams.append(`${column}`, `nxr.${range}`)\n    return this\n  }\n\n  /** @deprecated Use `rangeLte()` instead. */\n  nxr = this.rangeLte\n\n  /**\n   * Finds all rows whose range value on the stated `column` is adjacent to\n   * the specified `range`.\n   *\n   * @param column  The column to filter on.\n   * @param range  The range to filter with.\n   */\n  rangeAdjacent(column: keyof T, range: string): this {\n    this.url.searchParams.append(`${column}`, `adj.${range}`)\n    return this\n  }\n\n  /** @deprecated Use `rangeAdjacent()` instead. */\n  adj = this.rangeAdjacent\n\n  /**\n   * Finds all rows whose array or range value on the stated `column` overlaps\n   * (has a value in common) with the specified `value`.\n   *\n   * @param column  The column to filter on.\n   * @param value  The value to filter with.\n   */\n  overlaps(column: keyof T, value: string | T[keyof T][]): this {\n    if (typeof value === 'string') {\n      // range\n      this.url.searchParams.append(`${column}`, `ov.${value}`)\n    } else {\n      // array\n      this.url.searchParams.append(`${column}`, `ov.{${value.join(',')}}`)\n    }\n    return this\n  }\n\n  /** @deprecated Use `overlaps()` instead. */\n  ov = this.overlaps\n\n  /**\n   * Finds all rows whose text or tsvector value on the stated `column` matches\n   * the tsquery in `query`.\n   *\n   * @param column  The column to filter on.\n   * @param query  The Postgres tsquery string to filter with.\n   * @param config  The text search configuration to use.\n   * @param type  The type of tsquery conversion to use on `query`.\n   */\n  textSearch(\n    column: keyof T,\n    query: string,\n    {\n      config,\n      type = null,\n    }: { config?: string; type?: 'plain' | 'phrase' | 'websearch' | null } = {}\n  ): this {\n    let typePart = ''\n    if (type === 'plain') {\n      typePart = 'pl'\n    } else if (type === 'phrase') {\n      typePart = 'ph'\n    } else if (type === 'websearch') {\n      typePart = 'w'\n    }\n    const configPart = config === undefined ? '' : `(${config})`\n    this.url.searchParams.append(`${column}`, `${typePart}fts${configPart}.${query}`)\n    return this\n  }\n\n  /**\n   * Finds all rows whose tsvector value on the stated `column` matches\n   * to_tsquery(`query`).\n   *\n   * @param column  The column to filter on.\n   * @param query  The Postgres tsquery string to filter with.\n   * @param config  The text search configuration to use.\n   *\n   * @deprecated Use `textSearch()` instead.\n   */\n  fts(column: keyof T, query: string, { config }: { config?: string } = {}): this {\n    const configPart = typeof config === 'undefined' ? '' : `(${config})`\n    this.url.searchParams.append(`${column}`, `fts${configPart}.${query}`)\n    return this\n  }\n\n  /**\n   * Finds all rows whose tsvector value on the stated `column` matches\n   * plainto_tsquery(`query`).\n   *\n   * @param column  The column to filter on.\n   * @param query  The Postgres tsquery string to filter with.\n   * @param config  The text search configuration to use.\n   *\n   * @deprecated Use `textSearch()` with `type: 'plain'` instead.\n   */\n  plfts(column: keyof T, query: string, { config }: { config?: string } = {}): this {\n    const configPart = typeof config === 'undefined' ? '' : `(${config})`\n    this.url.searchParams.append(`${column}`, `plfts${configPart}.${query}`)\n    return this\n  }\n\n  /**\n   * Finds all rows whose tsvector value on the stated `column` matches\n   * phraseto_tsquery(`query`).\n   *\n   * @param column  The column to filter on.\n   * @param query  The Postgres tsquery string to filter with.\n   * @param config  The text search configuration to use.\n   *\n   * @deprecated Use `textSearch()` with `type: 'phrase'` instead.\n   */\n  phfts(column: keyof T, query: string, { config }: { config?: string } = {}): this {\n    const configPart = typeof config === 'undefined' ? '' : `(${config})`\n    this.url.searchParams.append(`${column}`, `phfts${configPart}.${query}`)\n    return this\n  }\n\n  /**\n   * Finds all rows whose tsvector value on the stated `column` matches\n   * websearch_to_tsquery(`query`).\n   *\n   * @param column  The column to filter on.\n   * @param query  The Postgres tsquery string to filter with.\n   * @param config  The text search configuration to use.\n   *\n   * @deprecated Use `textSearch()` with `type: 'websearch'` instead.\n   */\n  wfts(column: keyof T, query: string, { config }: { config?: string } = {}): this {\n    const configPart = typeof config === 'undefined' ? '' : `(${config})`\n    this.url.searchParams.append(`${column}`, `wfts${configPart}.${query}`)\n    return this\n  }\n\n  /**\n   * Finds all rows whose `column` satisfies the filter.\n   *\n   * @param column  The column to filter on.\n   * @param operator  The operator to filter with.\n   * @param value  The value to filter with.\n   */\n  filter(column: keyof T, operator: FilterOperator, value: any): this {\n    this.url.searchParams.append(`${column}`, `${operator}.${value}`)\n    return this\n  }\n\n  /**\n   * Finds all rows whose columns match the specified `query` object.\n   *\n   * @param query  The object to filter with, with column names as keys mapped\n   *               to their filter values.\n   */\n  match(query: Record<string, unknown>): this {\n    Object.keys(query).forEach((key) => {\n      this.url.searchParams.append(`${key}`, `eq.${query[key]}`)\n    })\n    return this\n  }\n}\n", "import { Fetch, PostgrestBuilder } from './types'\nimport PostgrestFilterBuilder from './PostgrestFilterBuilder'\n\nexport default class PostgrestQueryBuilder<T> extends PostgrestBuilder<T> {\n  constructor(\n    url: string,\n    {\n      headers = {},\n      schema,\n      fetch,\n      shouldThrowOnError,\n    }: {\n      headers?: { [key: string]: string }\n      schema?: string\n      fetch?: Fetch\n      shouldThrowOnError?: boolean\n    } = {}\n  ) {\n    super(({ fetch, shouldThrowOnError } as unknown) as PostgrestBuilder<T>)\n    this.url = new URL(url)\n    this.headers = { ...headers }\n    this.schema = schema\n  }\n\n  /**\n   * Performs vertical filtering with SELECT.\n   *\n   * @param columns  The columns to retrieve, separated by commas.\n   * @param head  When set to true, select will void data.\n   * @param count  Count algorithm to use to count rows in a table.\n   */\n  select(\n    columns = '*',\n    {\n      head = false,\n      count = null,\n    }: {\n      head?: boolean\n      count?: null | 'exact' | 'planned' | 'estimated'\n    } = {}\n  ): PostgrestFilterBuilder<T> {\n    this.method = 'GET'\n    // Remove whitespaces except when quoted\n    let quoted = false\n    const cleanedColumns = columns\n      .split('')\n      .map((c) => {\n        if (/\\s/.test(c) && !quoted) {\n          return ''\n        }\n        if (c === '\"') {\n          quoted = !quoted\n        }\n        return c\n      })\n      .join('')\n    this.url.searchParams.set('select', cleanedColumns)\n    if (count) {\n      this.headers['Prefer'] = `count=${count}`\n    }\n    if (head) {\n      this.method = 'HEAD'\n    }\n    return new PostgrestFilterBuilder(this)\n  }\n\n  /**\n   * Performs an INSERT into the table.\n   *\n   * @param values  The values to insert.\n   * @param returning  By default the new record is returned. Set this to 'minimal' if you don't need this value.\n   * @param count  Count algorithm to use to count rows in a table.\n   */\n  insert(\n    values: Partial<T> | Partial<T>[],\n    options?: {\n      returning?: 'minimal' | 'representation'\n      count?: null | 'exact' | 'planned' | 'estimated'\n    }\n  ): PostgrestFilterBuilder<T>\n  /**\n   * @deprecated Use `upsert()` instead.\n   */\n  insert(\n    values: Partial<T> | Partial<T>[],\n    options?: {\n      upsert?: boolean\n      onConflict?: string\n      returning?: 'minimal' | 'representation'\n      count?: null | 'exact' | 'planned' | 'estimated'\n    }\n  ): PostgrestFilterBuilder<T>\n  insert(\n    values: Partial<T> | Partial<T>[],\n    {\n      upsert = false,\n      onConflict,\n      returning = 'representation',\n      count = null,\n    }: {\n      upsert?: boolean\n      onConflict?: string\n      returning?: 'minimal' | 'representation'\n      count?: null | 'exact' | 'planned' | 'estimated'\n    } = {}\n  ): PostgrestFilterBuilder<T> {\n    this.method = 'POST'\n\n    const prefersHeaders = [`return=${returning}`]\n    if (upsert) prefersHeaders.push('resolution=merge-duplicates')\n\n    if (upsert && onConflict !== undefined) this.url.searchParams.set('on_conflict', onConflict)\n    this.body = values\n    if (count) {\n      prefersHeaders.push(`count=${count}`)\n    }\n    if (this.headers['Prefer']) {\n      prefersHeaders.unshift(this.headers['Prefer'])\n    }\n    this.headers['Prefer'] = prefersHeaders.join(',')\n\n    if (Array.isArray(values)) {\n      const columns = values.reduce((acc, x) => acc.concat(Object.keys(x)), [] as string[])\n      if (columns.length > 0) {\n        const uniqueColumns = [...new Set(columns)].map((column) => `\"${column}\"`)\n        this.url.searchParams.set('columns', uniqueColumns.join(','))\n      }\n    }\n\n    return new PostgrestFilterBuilder(this)\n  }\n\n  /**\n   * Performs an UPSERT into the table.\n   *\n   * @param values  The values to insert.\n   * @param onConflict  By specifying the `on_conflict` query parameter, you can make UPSERT work on a column(s) that has a UNIQUE constraint.\n   * @param returning  By default the new record is returned. Set this to 'minimal' if you don't need this value.\n   * @param count  Count algorithm to use to count rows in a table.\n   * @param ignoreDuplicates  Specifies if duplicate rows should be ignored and not inserted.\n   */\n  upsert(\n    values: Partial<T> | Partial<T>[],\n    {\n      onConflict,\n      returning = 'representation',\n      count = null,\n      ignoreDuplicates = false,\n    }: {\n      onConflict?: string\n      returning?: 'minimal' | 'representation'\n      count?: null | 'exact' | 'planned' | 'estimated'\n      ignoreDuplicates?: boolean\n    } = {}\n  ): PostgrestFilterBuilder<T> {\n    this.method = 'POST'\n\n    const prefersHeaders = [\n      `resolution=${ignoreDuplicates ? 'ignore' : 'merge'}-duplicates`,\n      `return=${returning}`,\n    ]\n\n    if (onConflict !== undefined) this.url.searchParams.set('on_conflict', onConflict)\n    this.body = values\n    if (count) {\n      prefersHeaders.push(`count=${count}`)\n    }\n    if (this.headers['Prefer']) {\n      prefersHeaders.unshift(this.headers['Prefer'])\n    }\n    this.headers['Prefer'] = prefersHeaders.join(',')\n\n    return new PostgrestFilterBuilder(this)\n  }\n\n  /**\n   * Performs an UPDATE on the table.\n   *\n   * @param values  The values to update.\n   * @param returning  By default the updated record is returned. Set this to 'minimal' if you don't need this value.\n   * @param count  Count algorithm to use to count rows in a table.\n   */\n  update(\n    values: Partial<T>,\n    {\n      returning = 'representation',\n      count = null,\n    }: {\n      returning?: 'minimal' | 'representation'\n      count?: null | 'exact' | 'planned' | 'estimated'\n    } = {}\n  ): PostgrestFilterBuilder<T> {\n    this.method = 'PATCH'\n    const prefersHeaders = [`return=${returning}`]\n    this.body = values\n    if (count) {\n      prefersHeaders.push(`count=${count}`)\n    }\n    if (this.headers['Prefer']) {\n      prefersHeaders.unshift(this.headers['Prefer'])\n    }\n    this.headers['Prefer'] = prefersHeaders.join(',')\n    return new PostgrestFilterBuilder(this)\n  }\n\n  /**\n   * Performs a DELETE on the table.\n   *\n   * @param returning  If `true`, return the deleted row(s) in the response.\n   * @param count  Count algorithm to use to count rows in a table.\n   */\n  delete({\n    returning = 'representation',\n    count = null,\n  }: {\n    returning?: 'minimal' | 'representation'\n    count?: null | 'exact' | 'planned' | 'estimated'\n  } = {}): PostgrestFilterBuilder<T> {\n    this.method = 'DELETE'\n    const prefersHeaders = [`return=${returning}`]\n    if (count) {\n      prefersHeaders.push(`count=${count}`)\n    }\n    if (this.headers['Prefer']) {\n      prefersHeaders.unshift(this.headers['Prefer'])\n    }\n    this.headers['Prefer'] = prefersHeaders.join(',')\n    return new PostgrestFilterBuilder(this)\n  }\n}\n", "import { Fetch, PostgrestBuilder } from './types'\nimport PostgrestFilterBuilder from './PostgrestFilterBuilder'\n\nexport default class PostgrestRpcBuilder<T> extends PostgrestBuilder<T> {\n  constructor(\n    url: string,\n    {\n      headers = {},\n      schema,\n      fetch,\n      shouldThrowOnError,\n    }: {\n      headers?: { [key: string]: string }\n      schema?: string\n      fetch?: Fetch\n      shouldThrowOnError?: boolean\n    } = {}\n  ) {\n    super(({ fetch, shouldThrowOnError } as unknown) as PostgrestBuilder<T>)\n    this.url = new URL(url)\n    this.headers = { ...headers }\n    this.schema = schema\n  }\n\n  /**\n   * Perform a function call.\n   */\n  rpc(\n    params?: object,\n    {\n      head = false,\n      count = null,\n    }: {\n      head?: boolean\n      count?: null | 'exact' | 'planned' | 'estimated'\n    } = {}\n  ): PostgrestFilterBuilder<T> {\n    if (head) {\n      this.method = 'HEAD'\n\n      if (params) {\n        Object.entries(params).forEach(([name, value]) => {\n          this.url.searchParams.append(name, value)\n        })\n      }\n    } else {\n      this.method = 'POST'\n      this.body = params\n    }\n\n    if (count) {\n      if (this.headers['Prefer'] !== undefined) this.headers['Prefer'] += `,count=${count}`\n      else this.headers['Prefer'] = `count=${count}`\n    }\n\n    return new PostgrestFilterBuilder(this)\n  }\n}\n", "// generated by genversion\nexport const version = '0.37.4'\n", "import { version } from './version'\nexport const DEFAULT_HEADERS = { 'X-Client-Info': `postgrest-js/${version}` }\n", "import PostgrestQueryBuilder from './lib/PostgrestQueryBuilder'\nimport PostgrestRpcBuilder from './lib/PostgrestRpcBuilder'\nimport PostgrestFilterBuilder from './lib/PostgrestFilterBuilder'\nimport { DEFAULT_HEADERS } from './lib/constants'\nimport { Fetch } from './lib/types'\n\nexport default class PostgrestClient {\n  url: string\n  headers: { [key: string]: string }\n  schema?: string\n  fetch?: Fetch\n  shouldThrowOnError?: boolean\n\n  /**\n   * Creates a PostgREST client.\n   *\n   * @param url  URL of the PostgREST endpoint.\n   * @param headers  Custom headers.\n   * @param schema  Postgres schema to switch to.\n   */\n  constructor(\n    url: string,\n    {\n      headers = {},\n      schema,\n      fetch,\n      throwOnError,\n    }: {\n      headers?: { [key: string]: string }\n      schema?: string\n      fetch?: Fetch\n      throwOnError?: boolean\n    } = {}\n  ) {\n    this.url = url\n    this.headers = { ...DEFAULT_HEADERS, ...headers }\n    this.schema = schema\n    this.fetch = fetch\n    this.shouldThrowOnError = throwOnError\n  }\n\n  /**\n   * Authenticates the request with JWT.\n   *\n   * @param token  The JWT token to use.\n   */\n  auth(token: string): this {\n    this.headers['Authorization'] = `Bearer ${token}`\n    return this\n  }\n\n  /**\n   * Perform a table operation.\n   *\n   * @param table  The table name to operate on.\n   */\n  from<T = any>(table: string): PostgrestQueryBuilder<T> {\n    const url = `${this.url}/${table}`\n    return new PostgrestQueryBuilder<T>(url, {\n      headers: this.headers,\n      schema: this.schema,\n      fetch: this.fetch,\n      shouldThrowOnError: this.shouldThrowOnError,\n    })\n  }\n\n  /**\n   * Perform a function call.\n   *\n   * @param fn  The function name to call.\n   * @param params  The parameters to pass to the function call.\n   * @param head  When set to true, no data will be returned.\n   * @param count  Count algorithm to use to count rows in a table.\n   */\n  rpc<T = any>(\n    fn: string,\n    params?: object,\n    {\n      head = false,\n      count = null,\n    }: {\n      head?: boolean\n      count?: null | 'exact' | 'planned' | 'estimated'\n    } = {}\n  ): PostgrestFilterBuilder<T> {\n    const url = `${this.url}/rpc/${fn}`\n    return new PostgrestRpcBuilder<T>(url, {\n      headers: this.headers,\n      schema: this.schema,\n      fetch: this.fetch,\n      shouldThrowOnError: this.shouldThrowOnError,\n    }).rpc(params, { head, count })\n  }\n}\n", "/**\n * Helpers to convert the change Payload into native JS types.\n */\n\n// Adapted from epgsql (src/epgsql_binary.erl), this module licensed under\n// 3-clause BSD found here: https://raw.githubusercontent.com/epgsql/epgsql/devel/LICENSE\n\nexport enum PostgresTypes {\n  abstime = 'abstime',\n  bool = 'bool',\n  date = 'date',\n  daterange = 'daterange',\n  float4 = 'float4',\n  float8 = 'float8',\n  int2 = 'int2',\n  int4 = 'int4',\n  int4range = 'int4range',\n  int8 = 'int8',\n  int8range = 'int8range',\n  json = 'json',\n  jsonb = 'jsonb',\n  money = 'money',\n  numeric = 'numeric',\n  oid = 'oid',\n  reltime = 'reltime',\n  text = 'text',\n  time = 'time',\n  timestamp = 'timestamp',\n  timestamptz = 'timestamptz',\n  timetz = 'timetz',\n  tsrange = 'tsrange',\n  tstzrange = 'tstzrange',\n}\n\ntype Columns = {\n  name: string // the column name. eg: \"user_id\"\n  type: string // the column type. eg: \"uuid\"\n  flags?: string[] // any special flags for the column. eg: [\"key\"]\n  type_modifier?: number // the type modifier. eg: 4294967295\n}[]\n\ntype BaseValue = null | string | number | boolean\ntype RecordValue = BaseValue | BaseValue[]\n\ntype Record = {\n  [key: string]: RecordValue\n}\n\n/**\n * Takes an array of columns and an object of string values then converts each string value\n * to its mapped type.\n *\n * @param {{name: String, type: String}[]} columns\n * @param {Object} record\n * @param {Object} options The map of various options that can be applied to the mapper\n * @param {Array} options.skipTypes The array of types that should not be converted\n *\n * @example convertChangeData([{name: 'first_name', type: 'text'}, {name: 'age', type: 'int4'}], {first_name: 'Paul', age:'33'}, {})\n * //=>{ first_name: 'Paul', age: 33 }\n */\nexport const convertChangeData = (\n  columns: Columns,\n  record: Record,\n  options: { skipTypes?: string[] } = {}\n): Record => {\n  const skipTypes = options.skipTypes ?? []\n\n  return Object.keys(record).reduce((acc, rec_key) => {\n    acc[rec_key] = convertColumn(rec_key, columns, record, skipTypes)\n    return acc\n  }, {} as Record)\n}\n\n/**\n * Converts the value of an individual column.\n *\n * @param {String} columnName The column that you want to convert\n * @param {{name: String, type: String}[]} columns All of the columns\n * @param {Object} record The map of string values\n * @param {Array} skipTypes An array of types that should not be converted\n * @return {object} Useless information\n *\n * @example convertColumn('age', [{name: 'first_name', type: 'text'}, {name: 'age', type: 'int4'}], {first_name: 'Paul', age: '33'}, [])\n * //=> 33\n * @example convertColumn('age', [{name: 'first_name', type: 'text'}, {name: 'age', type: 'int4'}], {first_name: 'Paul', age: '33'}, ['int4'])\n * //=> \"33\"\n */\nexport const convertColumn = (\n  columnName: string,\n  columns: Columns,\n  record: Record,\n  skipTypes: string[]\n): RecordValue => {\n  const column = columns.find((x) => x.name === columnName)\n  const colType = column?.type\n  const value = record[columnName]\n\n  if (colType && !skipTypes.includes(colType)) {\n    return convertCell(colType, value)\n  }\n\n  return noop(value)\n}\n\n/**\n * If the value of the cell is `null`, returns null.\n * Otherwise converts the string value to the correct type.\n * @param {String} type A postgres column type\n * @param {String} stringValue The cell value\n *\n * @example convertCell('bool', 't')\n * //=> true\n * @example convertCell('int8', '10')\n * //=> 10\n * @example convertCell('_int4', '{1,2,3,4}')\n * //=> [1,2,3,4]\n */\nexport const convertCell = (type: string, value: RecordValue): RecordValue => {\n  // if data type is an array\n  if (type.charAt(0) === '_') {\n    const dataType = type.slice(1, type.length)\n    return toArray(value, dataType)\n  }\n\n  // If not null, convert to correct type.\n  switch (type) {\n    case PostgresTypes.bool:\n      return toBoolean(value)\n    case PostgresTypes.float4:\n    case PostgresTypes.float8:\n    case PostgresTypes.int2:\n    case PostgresTypes.int4:\n    case PostgresTypes.int8:\n    case PostgresTypes.numeric:\n    case PostgresTypes.oid:\n      return toNumber(value)\n    case PostgresTypes.json:\n    case PostgresTypes.jsonb:\n      return toJson(value)\n    case PostgresTypes.timestamp:\n      return toTimestampString(value) // Format to be consistent with PostgREST\n    case PostgresTypes.abstime: // To allow users to cast it based on Timezone\n    case PostgresTypes.date: // To allow users to cast it based on Timezone\n    case PostgresTypes.daterange:\n    case PostgresTypes.int4range:\n    case PostgresTypes.int8range:\n    case PostgresTypes.money:\n    case PostgresTypes.reltime: // To allow users to cast it based on Timezone\n    case PostgresTypes.text:\n    case PostgresTypes.time: // To allow users to cast it based on Timezone\n    case PostgresTypes.timestamptz: // To allow users to cast it based on Timezone\n    case PostgresTypes.timetz: // To allow users to cast it based on Timezone\n    case PostgresTypes.tsrange:\n    case PostgresTypes.tstzrange:\n      return noop(value)\n    default:\n      // Return the value for remaining types\n      return noop(value)\n  }\n}\n\nconst noop = (value: RecordValue): RecordValue => {\n  return value\n}\nexport const toBoolean = (value: RecordValue): RecordValue => {\n  switch (value) {\n    case 't':\n      return true\n    case 'f':\n      return false\n    default:\n      return value\n  }\n}\nexport const toNumber = (value: RecordValue): RecordValue => {\n  if (typeof value === 'string') {\n    const parsedValue = parseFloat(value)\n    if (!Number.isNaN(parsedValue)) {\n      return parsedValue\n    }\n  }\n  return value\n}\nexport const toJson = (value: RecordValue): RecordValue => {\n  if (typeof value === 'string') {\n    try {\n      return JSON.parse(value)\n    } catch (error) {\n      console.log(`JSON parse error: ${error}`)\n      return value\n    }\n  }\n  return value\n}\n\n/**\n * Converts a Postgres Array into a native JS array\n *\n * @example toArray('{}', 'int4')\n * //=> []\n * @example toArray('{\"[2021-01-01,2021-12-31)\",\"(2021-01-01,2021-12-32]\"}', 'daterange')\n * //=> ['[2021-01-01,2021-12-31)', '(2021-01-01,2021-12-32]']\n * @example toArray([1,2,3,4], 'int4')\n * //=> [1,2,3,4]\n */\nexport const toArray = (value: RecordValue, type: string): RecordValue => {\n  if (typeof value !== 'string') {\n    return value\n  }\n\n  const lastIdx = value.length - 1\n  const closeBrace = value[lastIdx]\n  const openBrace = value[0]\n\n  // Confirm value is a Postgres array by checking curly brackets\n  if (openBrace === '{' && closeBrace === '}') {\n    let arr\n    const valTrim = value.slice(1, lastIdx)\n\n    // TODO: find a better solution to separate Postgres array data\n    try {\n      arr = JSON.parse('[' + valTrim + ']')\n    } catch (_) {\n      // WARNING: splitting on comma does not cover all edge cases\n      arr = valTrim ? valTrim.split(',') : []\n    }\n\n    return arr.map((val: BaseValue) => convertCell(type, val))\n  }\n\n  return value\n}\n\n/**\n * Fixes timestamp to be ISO-8601. Swaps the space between the date and time for a 'T'\n * See https://github.com/supabase/supabase/issues/18\n *\n * @example toTimestampString('2019-09-10 00:00:00')\n * //=> '2019-09-10T00:00:00'\n */\nexport const toTimestampString = (value: RecordValue): RecordValue => {\n  if (typeof value === 'string') {\n    return value.replace(' ', 'T')\n  }\n\n  return value\n}\n", "import { w3cwebsocket } from 'websocket'\nimport {\n  VSN,\n  CHANNEL_EVENTS,\n  TRANSPORTS,\n  SOCKET_STATES,\n  DEFAULT_TIMEOUT,\n  WS_CLOSE_NORMAL,\n  DEFAULT_HEADERS,\n  CONNECTION_STATE,\n} from './lib/constants'\nimport Timer from './lib/timer'\nimport Serializer from './lib/serializer'\nimport RealtimeSubscription from './RealtimeSubscription'\n\nexport type Options = {\n  transport?: WebSocket\n  timeout?: number\n  heartbeatIntervalMs?: number\n  longpollerTimeout?: number\n  logger?: Function\n  encode?: Function\n  decode?: Function\n  reconnectAfterMs?: Function\n  headers?: { [key: string]: string }\n  params?: { [key: string]: string }\n}\ntype Message = {\n  topic: string\n  event: string\n  payload: any\n  ref: string\n  join_ref?: string\n}\n\ntype ChannelParams = {\n  selfBroadcast?: boolean\n  [key: string]: any\n}\n\nconst noop = () => {}\n\nexport default class RealtimeClient {\n  accessToken: string | null = null\n  channels: RealtimeSubscription[] = []\n  endPoint: string = ''\n  headers?: { [key: string]: string } = DEFAULT_HEADERS\n  params?: { [key: string]: string } = {}\n  timeout: number = DEFAULT_TIMEOUT\n  transport: any = w3cwebsocket\n  heartbeatIntervalMs: number = 30000\n  longpollerTimeout: number = 20000\n  heartbeatTimer: ReturnType<typeof setInterval> | undefined = undefined\n  pendingHeartbeatRef: string | null = null\n  ref: number = 0\n  reconnectTimer: Timer\n  logger: Function = noop\n  encode: Function\n  decode: Function\n  reconnectAfterMs: Function\n  conn: WebSocket | null = null\n  sendBuffer: Function[] = []\n  serializer: Serializer = new Serializer()\n  stateChangeCallbacks: {\n    open: Function[]\n    close: Function[]\n    error: Function[]\n    message: Function[]\n  } = {\n    open: [],\n    close: [],\n    error: [],\n    message: [],\n  }\n\n  /**\n   * Initializes the Socket.\n   *\n   * @param endPoint The string WebSocket endpoint, ie, \"ws://example.com/socket\", \"wss://example.com\", \"/socket\" (inherited host & protocol)\n   * @param options.transport The Websocket Transport, for example WebSocket.\n   * @param options.timeout The default timeout in milliseconds to trigger push timeouts.\n   * @param options.params The optional params to pass when connecting.\n   * @param options.headers The optional headers to pass when connecting.\n   * @param options.heartbeatIntervalMs The millisec interval to send a heartbeat message.\n   * @param options.logger The optional function for specialized logging, ie: logger: (kind, msg, data) => { console.log(`${kind}: ${msg}`, data) }\n   * @param options.encode The function to encode outgoing messages. Defaults to JSON: (payload, callback) => callback(JSON.stringify(payload))\n   * @param options.decode The function to decode incoming messages. Defaults to Serializer's decode.\n   * @param options.longpollerTimeout The maximum timeout of a long poll AJAX request. Defaults to 20s (double the server long poll timer).\n   * @param options.reconnectAfterMs he optional function that returns the millsec reconnect interval. Defaults to stepped backoff off.\n   */\n  constructor(endPoint: string, options?: Options) {\n    this.endPoint = `${endPoint}/${TRANSPORTS.websocket}`\n\n    if (options?.params) this.params = options.params\n    if (options?.headers) this.headers = { ...this.headers, ...options.headers }\n    if (options?.timeout) this.timeout = options.timeout\n    if (options?.logger) this.logger = options.logger\n    if (options?.transport) this.transport = options.transport\n    if (options?.heartbeatIntervalMs)\n      this.heartbeatIntervalMs = options.heartbeatIntervalMs\n    if (options?.longpollerTimeout)\n      this.longpollerTimeout = options.longpollerTimeout\n\n    this.reconnectAfterMs = options?.reconnectAfterMs\n      ? options.reconnectAfterMs\n      : (tries: number) => {\n          return [1000, 2000, 5000, 10000][tries - 1] || 10000\n        }\n    this.encode = options?.encode\n      ? options.encode\n      : (payload: JSON, callback: Function) => {\n          return callback(JSON.stringify(payload))\n        }\n    this.decode = options?.decode\n      ? options.decode\n      : this.serializer.decode.bind(this.serializer)\n    this.reconnectTimer = new Timer(async () => {\n      await this.disconnect()\n      this.connect()\n    }, this.reconnectAfterMs)\n  }\n\n  /**\n   * Connects the socket, unless already connected.\n   */\n  connect(): void {\n    if (this.conn) {\n      return\n    }\n\n    this.conn = new this.transport(this.endPointURL(), [], null, this.headers)\n\n    if (this.conn) {\n      // this.conn.timeout = this.longpollerTimeout // TYPE ERROR\n      this.conn.binaryType = 'arraybuffer'\n      this.conn.onopen = () => this._onConnOpen()\n      this.conn.onerror = (error) => this._onConnError(error as ErrorEvent)\n      this.conn.onmessage = (event) => this.onConnMessage(event)\n      this.conn.onclose = (event) => this._onConnClose(event)\n    }\n  }\n\n  /**\n   * Disconnects the socket.\n   *\n   * @param code A numeric status code to send on disconnect.\n   * @param reason A custom reason for the disconnect.\n   */\n  disconnect(\n    code?: number,\n    reason?: string\n  ): Promise<{ error: Error | null; data: boolean }> {\n    return new Promise((resolve, _reject) => {\n      try {\n        if (this.conn) {\n          this.conn.onclose = function () {} // noop\n          if (code) {\n            this.conn.close(code, reason || '')\n          } else {\n            this.conn.close()\n          }\n          this.conn = null\n          // remove open handles\n          this.heartbeatTimer && clearInterval(this.heartbeatTimer)\n          this.reconnectTimer.reset()\n        }\n        resolve({ error: null, data: true })\n      } catch (error) {\n        resolve({ error: error as Error, data: false })\n      }\n    })\n  }\n\n  /**\n   * Logs the message.\n   *\n   * For customized logging, `this.logger` can be overriden.\n   */\n  log(kind: string, msg: string, data?: any) {\n    this.logger(kind, msg, data)\n  }\n\n  /**\n   * Registers a callback for connection state change event.\n   *\n   * @param callback A function to be called when the event occurs.\n   *\n   * @example\n   *    socket.onOpen(() => console.log(\"Socket opened.\"))\n   */\n  onOpen(callback: Function) {\n    this.stateChangeCallbacks.open.push(callback)\n  }\n\n  /**\n   * Registers a callback for connection state change events.\n   *\n   * @param callback A function to be called when the event occurs.\n   *\n   * @example\n   *    socket.onOpen(() => console.log(\"Socket closed.\"))\n   */\n  onClose(callback: Function) {\n    this.stateChangeCallbacks.close.push(callback)\n  }\n\n  /**\n   * Registers a callback for connection state change events.\n   *\n   * @param callback A function to be called when the event occurs.\n   *\n   * @example\n   *    socket.onOpen((error) => console.log(\"An error occurred\"))\n   */\n  onError(callback: Function) {\n    this.stateChangeCallbacks.error.push(callback)\n  }\n\n  /**\n   * Calls a function any time a message is received.\n   *\n   * @param callback A function to be called when the event occurs.\n   *\n   * @example\n   *    socket.onMessage((message) => console.log(message))\n   */\n  onMessage(callback: Function) {\n    this.stateChangeCallbacks.message.push(callback)\n  }\n\n  /**\n   * Returns the current state of the socket.\n   */\n  connectionState(): CONNECTION_STATE {\n    switch (this.conn && this.conn.readyState) {\n      case SOCKET_STATES.connecting:\n        return CONNECTION_STATE.Connecting\n      case SOCKET_STATES.open:\n        return CONNECTION_STATE.Open\n      case SOCKET_STATES.closing:\n        return CONNECTION_STATE.Closing\n      default:\n        return CONNECTION_STATE.Closed\n    }\n  }\n\n  /**\n   * Retuns `true` is the connection is open.\n   */\n  isConnected(): boolean {\n    return this.connectionState() === CONNECTION_STATE.Open\n  }\n\n  /**\n   * Removes a subscription from the socket.\n   *\n   * @param channel An open subscription.\n   */\n  remove(channel: RealtimeSubscription) {\n    this.channels = this.channels.filter(\n      (c: RealtimeSubscription) => c.joinRef() !== channel.joinRef()\n    )\n  }\n\n  channel(topic: string, chanParams: ChannelParams = {}): RealtimeSubscription {\n    const chan = new RealtimeSubscription(topic, chanParams, this)\n    this.channels.push(chan)\n    return chan\n  }\n\n  /**\n   * Push out a message if the socket is connected.\n   *\n   * If the socket is not connected, the message gets enqueued within a local buffer, and sent out when a connection is next established.\n   */\n  push(data: Message): void {\n    const { topic, event, payload, ref } = data\n    let callback = () => {\n      this.encode(data, (result: any) => {\n        this.conn?.send(result)\n      })\n    }\n    this.log('push', `${topic} ${event} (${ref})`, payload)\n    if (this.isConnected()) {\n      callback()\n    } else {\n      this.sendBuffer.push(callback)\n    }\n  }\n\n  onConnMessage(rawMessage: { data: any }) {\n    this.decode(rawMessage.data, (msg: Message) => {\n      let { topic, event, payload, ref } = msg\n\n      if (\n        (ref && ref === this.pendingHeartbeatRef) ||\n        event === payload?.type\n      ) {\n        this.pendingHeartbeatRef = null\n      }\n\n      this.log(\n        'receive',\n        `${payload.status || ''} ${topic} ${event} ${\n          (ref && '(' + ref + ')') || ''\n        }`,\n        payload\n      )\n      this.channels\n        .filter((channel: RealtimeSubscription) => channel.isMember(topic))\n        .forEach((channel: RealtimeSubscription) =>\n          channel.trigger(event, payload, ref)\n        )\n      this.stateChangeCallbacks.message.forEach((callback) => callback(msg))\n    })\n  }\n\n  /**\n   * Returns the URL of the websocket.\n   */\n  endPointURL(): string {\n    return this._appendParams(\n      this.endPoint,\n      Object.assign({}, this.params, { vsn: VSN })\n    )\n  }\n\n  /**\n   * Return the next message ref, accounting for overflows\n   */\n  makeRef(): string {\n    let newRef = this.ref + 1\n    if (newRef === this.ref) {\n      this.ref = 0\n    } else {\n      this.ref = newRef\n    }\n\n    return this.ref.toString()\n  }\n\n  /**\n   * Sets the JWT access token used for channel subscription authorization and Realtime RLS.\n   *\n   * @param token A JWT string.\n   */\n  setAuth(token: string | null) {\n    this.accessToken = token\n\n    this.channels.forEach((channel) => {\n      token && channel.updateJoinPayload({ user_token: token })\n\n      if (channel.joinedOnce && channel.isJoined()) {\n        channel.push(CHANNEL_EVENTS.access_token, { access_token: token })\n      }\n    })\n  }\n\n  /**\n   * Unsubscribe from channels with the specified topic.\n   */\n  leaveOpenTopic(topic: string): void {\n    let dupChannel = this.channels.find(\n      (c) => c.topic === topic && (c.isJoined() || c.isJoining())\n    )\n    if (dupChannel) {\n      this.log('transport', `leaving duplicate topic \"${topic}\"`)\n      dupChannel.unsubscribe()\n    }\n  }\n\n  private _onConnOpen() {\n    this.log('transport', `connected to ${this.endPointURL()}`)\n    this._flushSendBuffer()\n    this.reconnectTimer.reset()\n    this.heartbeatTimer && clearInterval(this.heartbeatTimer)\n    this.heartbeatTimer = setInterval(\n      () => this._sendHeartbeat(),\n      this.heartbeatIntervalMs\n    )\n    this.stateChangeCallbacks.open.forEach((callback) => callback())!\n  }\n\n  private _onConnClose(event: any) {\n    this.log('transport', 'close', event)\n    this._triggerChanError()\n    this.heartbeatTimer && clearInterval(this.heartbeatTimer)\n    this.reconnectTimer.scheduleTimeout()\n    this.stateChangeCallbacks.close.forEach((callback) => callback(event))\n  }\n\n  private _onConnError(error: ErrorEvent) {\n    this.log('transport', error.message)\n    this._triggerChanError()\n    this.stateChangeCallbacks.error.forEach((callback) => callback(error))\n  }\n\n  private _triggerChanError() {\n    this.channels.forEach((channel: RealtimeSubscription) =>\n      channel.trigger(CHANNEL_EVENTS.error)\n    )\n  }\n\n  private _appendParams(\n    url: string,\n    params: { [key: string]: string }\n  ): string {\n    if (Object.keys(params).length === 0) {\n      return url\n    }\n    const prefix = url.match(/\\?/) ? '&' : '?'\n    const query = new URLSearchParams(params)\n\n    return `${url}${prefix}${query}`\n  }\n\n  private _flushSendBuffer() {\n    if (this.isConnected() && this.sendBuffer.length > 0) {\n      this.sendBuffer.forEach((callback) => callback())\n      this.sendBuffer = []\n    }\n  }\n\n  private _sendHeartbeat() {\n    if (!this.isConnected()) {\n      return\n    }\n    if (this.pendingHeartbeatRef) {\n      this.pendingHeartbeatRef = null\n      this.log(\n        'transport',\n        'heartbeat timeout. Attempting to re-establish connection'\n      )\n      this.conn?.close(WS_CLOSE_NORMAL, 'hearbeat timeout')\n      return\n    }\n    this.pendingHeartbeatRef = this.makeRef()\n    this.push({\n      topic: 'phoenix',\n      event: 'heartbeat',\n      payload: {},\n      ref: this.pendingHeartbeatRef,\n    })\n    this.setAuth(this.accessToken)\n  }\n}\n", "export const version = '1.7.5'\n", "import { version } from './version'\n\nexport const DEFAULT_HEADERS = { 'X-Client-Info': `realtime-js/${version}` }\n\nexport const VSN: string = '1.0.0'\n\nexport const DEFAULT_TIMEOUT = 10000\n\nexport const WS_CLOSE_NORMAL = 1000\n\nexport enum SOCKET_STATES {\n  connecting = 0,\n  open = 1,\n  closing = 2,\n  closed = 3,\n}\n\nexport enum CHANNEL_STATES {\n  closed = 'closed',\n  errored = 'errored',\n  joined = 'joined',\n  joining = 'joining',\n  leaving = 'leaving',\n}\n\nexport enum CHANNEL_EVENTS {\n  close = 'phx_close',\n  error = 'phx_error',\n  join = 'phx_join',\n  reply = 'phx_reply',\n  leave = 'phx_leave',\n  access_token = 'access_token',\n}\n\nexport enum TRANSPORTS {\n  websocket = 'websocket',\n}\n\nexport enum CONNECTION_STATE {\n  Connecting = 'connecting',\n  Open = 'open',\n  Closing = 'closing',\n  Closed = 'closed',\n}\n", "/**\n * Creates a timer that accepts a `timerCalc` function to perform calculated timeout retries, such as exponential backoff.\n *\n * @example\n *    let reconnectTimer = new Timer(() => this.connect(), function(tries){\n *      return [1000, 5000, 10000][tries - 1] || 10000\n *    })\n *    reconnectTimer.scheduleTimeout() // fires after 1000\n *    reconnectTimer.scheduleTimeout() // fires after 5000\n *    reconnectTimer.reset()\n *    reconnectTimer.scheduleTimeout() // fires after 1000\n */\nexport default class Timer {\n  timer: number | undefined = undefined\n  tries: number = 0\n\n  constructor(public callback: Function, public timerCalc: Function) {\n    this.callback = callback\n    this.timerCalc = timerCalc\n  }\n\n  reset() {\n    this.tries = 0\n    clearTimeout(this.timer)\n  }\n\n  // Cancels any previous scheduleTimeout and schedules callback\n  scheduleTimeout() {\n    clearTimeout(this.timer)\n\n    this.timer = <any>setTimeout(() => {\n      this.tries = this.tries + 1\n      this.callback()\n    }, this.timerCalc(this.tries + 1))\n  }\n}\n", "// This file draws heavily from https://github.com/phoenixframework/phoenix/commit/cf098e9cf7a44ee6479d31d911a97d3c7430c6fe\n// License: https://github.com/phoenixframework/phoenix/blob/master/LICENSE.md\n\nexport default class Serializer {\n  HEADER_LENGTH = 1\n\n  decode(rawPayload: ArrayBuffer | string, callback: Function) {\n    if (rawPayload.constructor === ArrayBuffer) {\n      return callback(this._binaryDecode(rawPayload))\n    }\n\n    if (typeof rawPayload === 'string') {\n      return callback(JSON.parse(rawPayload))\n    }\n\n    return callback({})\n  }\n\n  private _binaryDecode(buffer: ArrayBuffer) {\n    const view = new DataView(buffer)\n    const decoder = new TextDecoder()\n\n    return this._decodeBroadcast(buffer, view, decoder)\n  }\n\n  private _decodeBroadcast(\n    buffer: ArrayBuffer,\n    view: DataView,\n    decoder: TextDecoder\n  ): {\n    ref: null\n    topic: string\n    event: string\n    payload: object\n  } {\n    const topicSize = view.getUint8(1)\n    const eventSize = view.getUint8(2)\n    let offset = this.HEADER_LENGTH + 2\n    const topic = decoder.decode(buffer.slice(offset, offset + topicSize))\n    offset = offset + topicSize\n    const event = decoder.decode(buffer.slice(offset, offset + eventSize))\n    offset = offset + eventSize\n    const data = JSON.parse(\n      decoder.decode(buffer.slice(offset, buffer.byteLength))\n    )\n\n    return { ref: null, topic: topic, event: event, payload: data }\n  }\n}\n", "import { DEFAULT_TIMEOUT } from '../lib/constants'\nimport RealtimeSubscription from '../RealtimeSubscription'\n\nexport default class Push {\n  sent: boolean = false\n  timeoutTimer: number | undefined = undefined\n  ref: string = ''\n  receivedResp: {\n    status: string\n    response: Function\n  } | null = null\n  recHooks: {\n    status: string\n    callback: Function\n  }[] = []\n  refEvent: string | null = null\n\n  /**\n   * Initializes the Push\n   *\n   * @param channel The Channel\n   * @param event The event, for example `\"phx_join\"`\n   * @param payload The payload, for example `{user_id: 123}`\n   * @param timeout The push timeout in milliseconds\n   */\n  constructor(\n    public channel: RealtimeSubscription,\n    public event: string,\n    public payload: { [key: string]: unknown } = {},\n    public timeout: number = DEFAULT_TIMEOUT\n  ) {}\n\n  resend(timeout: number) {\n    this.timeout = timeout\n    this._cancelRefEvent()\n    this.ref = ''\n    this.refEvent = null\n    this.receivedResp = null\n    this.sent = false\n    this.send()\n  }\n\n  send() {\n    if (this._hasReceived('timeout')) {\n      return\n    }\n    this.startTimeout()\n    this.sent = true\n    this.channel.socket.push({\n      topic: this.channel.topic,\n      event: this.event,\n      payload: this.payload,\n      ref: this.ref,\n      join_ref: this.channel.joinRef(),\n    })\n  }\n\n  updatePayload(payload: { [key: string]: unknown }): void {\n    this.payload = { ...this.payload, ...payload }\n  }\n\n  receive(status: string, callback: Function) {\n    if (this._hasReceived(status)) {\n      callback(this.receivedResp?.response)\n    }\n\n    this.recHooks.push({ status, callback })\n    return this\n  }\n\n  startTimeout() {\n    if (this.timeoutTimer) {\n      return\n    }\n    this.ref = this.channel.socket.makeRef()\n    this.refEvent = this.channel.replyEventName(this.ref)\n\n    const callback = (payload: any) => {\n      this._cancelRefEvent()\n      this._cancelTimeout()\n      this.receivedResp = payload\n      this._matchReceive(payload)\n    }\n\n    this.channel.on(this.refEvent, callback)\n\n    this.timeoutTimer = <any>setTimeout(() => {\n      this.trigger('timeout', {})\n    }, this.timeout)\n  }\n\n  trigger(status: string, response: any) {\n    if (this.refEvent) this.channel.trigger(this.refEvent, { status, response })\n  }\n\n  destroy() {\n    this._cancelRefEvent()\n    this._cancelTimeout()\n  }\n\n  private _cancelRefEvent() {\n    if (!this.refEvent) {\n      return\n    }\n\n    this.channel.off(this.refEvent)\n  }\n\n  private _cancelTimeout() {\n    clearTimeout(this.timeoutTimer)\n    this.timeoutTimer = undefined\n  }\n\n  private _matchReceive({\n    status,\n    response,\n  }: {\n    status: string\n    response: Function\n  }) {\n    this.recHooks\n      .filter((h) => h.status === status)\n      .forEach((h) => h.callback(response))\n  }\n\n  private _hasReceived(status: string) {\n    return this.receivedResp && this.receivedResp.status === status\n  }\n}\n", "import { CHANNEL_EVENTS, CHANNEL_STATES } from './lib/constants'\nimport Push from './lib/push'\nimport RealtimeClient from './RealtimeClient'\nimport Timer from './lib/timer'\n\nexport default class RealtimeSubscription {\n  bindings: any[] = []\n  timeout: number\n  state = CHANNEL_STATES.closed\n  joinedOnce = false\n  joinPush: Push\n  rejoinTimer: Timer\n  pushBuffer: Push[] = []\n\n  constructor(\n    public topic: string,\n    public params: { [key: string]: unknown } = {},\n    public socket: RealtimeClient\n  ) {\n    this.timeout = this.socket.timeout\n    this.joinPush = new Push(\n      this,\n      CHANNEL_EVENTS.join,\n      this.params,\n      this.timeout\n    )\n    this.rejoinTimer = new Timer(\n      () => this.rejoinUntilConnected(),\n      this.socket.reconnectAfterMs\n    )\n    this.joinPush.receive('ok', () => {\n      this.state = CHANNEL_STATES.joined\n      this.rejoinTimer.reset()\n      this.pushBuffer.forEach((pushEvent: Push) => pushEvent.send())\n      this.pushBuffer = []\n    })\n    this.onClose(() => {\n      this.rejoinTimer.reset()\n      this.socket.log('channel', `close ${this.topic} ${this.joinRef()}`)\n      this.state = CHANNEL_STATES.closed\n      this.socket.remove(this)\n    })\n    this.onError((reason: string) => {\n      if (this.isLeaving() || this.isClosed()) {\n        return\n      }\n      this.socket.log('channel', `error ${this.topic}`, reason)\n      this.state = CHANNEL_STATES.errored\n      this.rejoinTimer.scheduleTimeout()\n    })\n    this.joinPush.receive('timeout', () => {\n      if (!this.isJoining()) {\n        return\n      }\n      this.socket.log('channel', `timeout ${this.topic}`, this.joinPush.timeout)\n      this.state = CHANNEL_STATES.errored\n      this.rejoinTimer.scheduleTimeout()\n    })\n    this.on(CHANNEL_EVENTS.reply, (payload: any, ref: string) => {\n      this.trigger(this.replyEventName(ref), payload)\n    })\n  }\n\n  rejoinUntilConnected() {\n    this.rejoinTimer.scheduleTimeout()\n    if (this.socket.isConnected()) {\n      this.rejoin()\n    }\n  }\n\n  subscribe(timeout = this.timeout) {\n    if (this.joinedOnce) {\n      throw `tried to subscribe multiple times. 'subscribe' can only be called a single time per channel instance`\n    } else {\n      this.joinedOnce = true\n      this.rejoin(timeout)\n      return this.joinPush\n    }\n  }\n\n  onClose(callback: Function) {\n    this.on(CHANNEL_EVENTS.close, callback)\n  }\n\n  onError(callback: Function) {\n    this.on(CHANNEL_EVENTS.error, (reason: string) => callback(reason))\n  }\n\n  on(event: string, callback: Function) {\n    this.bindings.push({ event, callback })\n  }\n\n  off(event: string) {\n    this.bindings = this.bindings.filter((bind) => bind.event !== event)\n  }\n\n  canPush() {\n    return this.socket.isConnected() && this.isJoined()\n  }\n\n  push(event: CHANNEL_EVENTS, payload: any, timeout = this.timeout) {\n    if (!this.joinedOnce) {\n      throw `tried to push '${event}' to '${this.topic}' before joining. Use channel.subscribe() before pushing events`\n    }\n    let pushEvent = new Push(this, event, payload, timeout)\n    if (this.canPush()) {\n      pushEvent.send()\n    } else {\n      pushEvent.startTimeout()\n      this.pushBuffer.push(pushEvent)\n    }\n\n    return pushEvent\n  }\n\n  updateJoinPayload(payload: { [key: string]: unknown }): void {\n    this.joinPush.updatePayload(payload)\n  }\n\n  /**\n   * Leaves the channel\n   *\n   * Unsubscribes from server events, and instructs channel to terminate on server.\n   * Triggers onClose() hooks.\n   *\n   * To receive leave acknowledgements, use the a `receive` hook to bind to the server ack, ie:\n   * channel.unsubscribe().receive(\"ok\", () => alert(\"left!\") )\n   */\n  unsubscribe(timeout = this.timeout) {\n    this.state = CHANNEL_STATES.leaving\n    let onClose = () => {\n      this.socket.log('channel', `leave ${this.topic}`)\n      this.trigger(CHANNEL_EVENTS.close, 'leave', this.joinRef())\n    }\n    // Destroy joinPush to avoid connection timeouts during unscription phase\n    this.joinPush.destroy()\n\n    let leavePush = new Push(this, CHANNEL_EVENTS.leave, {}, timeout)\n    leavePush.receive('ok', () => onClose()).receive('timeout', () => onClose())\n    leavePush.send()\n    if (!this.canPush()) {\n      leavePush.trigger('ok', {})\n    }\n\n    return leavePush\n  }\n\n  /**\n   * Overridable message hook\n   *\n   * Receives all events for specialized message handling before dispatching to the channel callbacks.\n   * Must return the payload, modified or unmodified.\n   */\n  onMessage(event: string, payload: any, ref?: string) {\n    return payload\n  }\n\n  isMember(topic: string) {\n    return this.topic === topic\n  }\n\n  joinRef() {\n    return this.joinPush.ref\n  }\n\n  rejoin(timeout = this.timeout) {\n    if (this.isLeaving()) {\n      return\n    }\n    this.socket.leaveOpenTopic(this.topic)\n    this.state = CHANNEL_STATES.joining\n    this.joinPush.resend(timeout)\n  }\n\n  trigger(event: string, payload?: any, ref?: string) {\n    let { close, error, leave, join } = CHANNEL_EVENTS\n    let events: string[] = [close, error, leave, join]\n    if (ref && events.indexOf(event) >= 0 && ref !== this.joinRef()) {\n      return\n    }\n    let handledPayload = this.onMessage(event, payload, ref)\n    if (payload && !handledPayload) {\n      throw 'channel onMessage callbacks must return the payload, modified or unmodified'\n    }\n\n    this.bindings\n      .filter((bind) => {\n        // Bind all events if the user specifies a wildcard.\n        if (bind.event === '*') {\n          return event === payload?.type\n        } else {\n          return bind.event === event\n        }\n      })\n      .map((bind) => bind.callback(handledPayload, ref))\n  }\n\n  replyEventName(ref: string) {\n    return `chan_reply_${ref}`\n  }\n\n  isClosed() {\n    return this.state === CHANNEL_STATES.closed\n  }\n  isErrored() {\n    return this.state === CHANNEL_STATES.errored\n  }\n  isJoined() {\n    return this.state === CHANNEL_STATES.joined\n  }\n  isJoining() {\n    return this.state === CHANNEL_STATES.joining\n  }\n  isLeaving() {\n    return this.state === CHANNEL_STATES.leaving\n  }\n}\n", "import { RealtimeSubscription, RealtimeClient, Transformers } from '@supabase/realtime-js'\nimport { GenericObject, SupabaseEventTypes, SupabaseRealtimePayload } from './types'\n\nexport class SupabaseRealtimeClient {\n  subscription: RealtimeSubscription\n\n  constructor(socket: RealtimeClient, headers: GenericObject, schema: string, tableName: string) {\n    const chanParams: GenericObject = {}\n    const topic = tableName === '*' ? `realtime:${schema}` : `realtime:${schema}:${tableName}`\n    const userToken = headers['Authorization'].split(' ')[1]\n\n    if (userToken) {\n      chanParams['user_token'] = userToken\n    }\n\n    this.subscription = socket.channel(topic, chanParams) as RealtimeSubscription\n  }\n\n  private getPayloadRecords(payload: any) {\n    const records = {\n      new: {},\n      old: {},\n    }\n\n    if (payload.type === 'INSERT' || payload.type === 'UPDATE') {\n      records.new = Transformers.convertChangeData(payload.columns, payload.record)\n    }\n\n    if (payload.type === 'UPDATE' || payload.type === 'DELETE') {\n      records.old = Transformers.convertChangeData(payload.columns, payload.old_record)\n    }\n\n    return records\n  }\n\n  /**\n   * The event you want to listen to.\n   *\n   * @param event The event\n   * @param callback A callback function that is called whenever the event occurs.\n   */\n  on(event: SupabaseEventTypes, callback: (payload: SupabaseRealtimePayload<any>) => void) {\n    this.subscription.on(event, (payload: any) => {\n      let enrichedPayload: SupabaseRealtimePayload<any> = {\n        schema: payload.schema,\n        table: payload.table,\n        commit_timestamp: payload.commit_timestamp,\n        eventType: payload.type,\n        new: {},\n        old: {},\n        errors: payload.errors,\n      }\n\n      enrichedPayload = { ...enrichedPayload, ...this.getPayloadRecords(payload) }\n\n      callback(enrichedPayload)\n    })\n    return this\n  }\n\n  /**\n   * Enables the subscription.\n   */\n  subscribe(callback: Function = () => {}) {\n    this.subscription.onError((e: Error) => callback('SUBSCRIPTION_ERROR', e))\n    this.subscription.onClose(() => callback('CLOSED'))\n    this.subscription\n      .subscribe()\n      .receive('ok', () => callback('SUBSCRIBED'))\n      .receive('error', (e: Error) => callback('SUBSCRIPTION_ERROR', e))\n      .receive('timeout', () => callback('RETRYING_AFTER_TIMEOUT'))\n    return this.subscription\n  }\n}\n", "import { PostgrestQueryBuilder } from '@supabase/postgrest-js'\nimport { SupabaseRealtimeClient } from './SupabaseRealtimeClient'\nimport { RealtimeClient } from '@supabase/realtime-js'\nimport { Fetch, GenericObject, SupabaseEventTypes, SupabaseRealtimePayload } from './types'\n\nexport class SupabaseQueryBuilder<T> extends PostgrestQueryBuilder<T> {\n  private _subscription: SupabaseRealtimeClient | null = null\n  private _realtime: RealtimeClient\n  private _headers: GenericObject\n  private _schema: string\n  private _table: string\n\n  constructor(\n    url: string,\n    {\n      headers = {},\n      schema,\n      realtime,\n      table,\n      fetch,\n      shouldThrowOnError,\n    }: {\n      headers?: GenericObject\n      schema: string\n      realtime: RealtimeClient\n      table: string\n      fetch?: Fetch\n      shouldThrowOnError?: boolean\n    }\n  ) {\n    super(url, { headers, schema, fetch, shouldThrowOnError })\n\n    this._realtime = realtime\n    this._headers = headers\n    this._schema = schema\n    this._table = table\n  }\n\n  /**\n   * Subscribe to realtime changes in your database.\n   * @param event The database event which you would like to receive updates for, or you can use the special wildcard `*` to listen to all changes.\n   * @param callback A callback that will handle the payload that is sent whenever your database changes.\n   */\n  on(\n    event: SupabaseEventTypes,\n    callback: (payload: SupabaseRealtimePayload<T>) => void\n  ): SupabaseRealtimeClient {\n    if (!this._realtime.isConnected()) {\n      this._realtime.connect()\n    }\n    if (!this._subscription) {\n      this._subscription = new SupabaseRealtimeClient(\n        this._realtime,\n        this._headers,\n        this._schema,\n        this._table\n      )\n    }\n    return this._subscription.on(event, callback)\n  }\n}\n", "// generated by genversion\nexport const version = '1.7.3'\n", "import { version } from './version'\nexport const DEFAULT_HEADERS = { 'X-Client-Info': `storage-js/${version}` }\n", "export type Fetch = typeof fetch\n\nexport interface FetchOptions {\n  headers?: {\n    [key: string]: string\n  }\n  noResolveJson?: boolean\n}\n\nexport interface FetchParameters {\n  signal?: AbortSignal\n}\n\nexport type RequestMethodType = 'GET' | 'POST' | 'PUT' | 'DELETE'\n\nconst _getErrorMessage = (err: any): string =>\n  err.msg || err.message || err.error_description || err.error || JSON.stringify(err)\n\nconst handleError = (error: any, reject: any) => {\n  if (typeof error.json !== 'function') {\n    return reject(error)\n  }\n  error.json().then((err: any) => {\n    return reject({\n      message: _getErrorMessage(err),\n      status: error?.status || 500,\n    })\n  })\n}\n\nconst _getRequestParams = (\n  method: RequestMethodType,\n  options?: FetchOptions,\n  parameters?: FetchParameters,\n  body?: object\n) => {\n  const params: { [k: string]: any } = { method, headers: options?.headers || {} }\n\n  if (method === 'GET') {\n    return params\n  }\n\n  params.headers = { 'Content-Type': 'application/json', ...options?.headers }\n  params.body = JSON.stringify(body)\n  return { ...params, ...parameters }\n}\n\nasync function _handleRequest(\n  fetcher: Fetch,\n  method: RequestMethodType,\n  url: string,\n  options?: FetchOptions,\n  parameters?: FetchParameters,\n  body?: object\n): Promise<any> {\n  return new Promise((resolve, reject) => {\n    fetcher(url, _getRequestParams(method, options, parameters, body))\n      .then((result) => {\n        if (!result.ok) throw result\n        if (options?.noResolveJson) return resolve(result)\n        return result.json()\n      })\n      .then((data) => resolve(data))\n      .catch((error) => handleError(error, reject))\n  })\n}\n\nexport async function get(\n  fetcher: Fetch,\n  url: string,\n  options?: FetchOptions,\n  parameters?: FetchParameters\n): Promise<any> {\n  return _handleRequest(fetcher, 'GET', url, options, parameters)\n}\n\nexport async function post(\n  fetcher: Fetch,\n  url: string,\n  body: object,\n  options?: FetchOptions,\n  parameters?: FetchParameters\n): Promise<any> {\n  return _handleRequest(fetcher, 'POST', url, options, parameters, body)\n}\n\nexport async function put(\n  fetcher: Fetch,\n  url: string,\n  body: object,\n  options?: FetchOptions,\n  parameters?: FetchParameters\n): Promise<any> {\n  return _handleRequest(fetcher, 'PUT', url, options, parameters, body)\n}\n\nexport async function remove(\n  fetcher: Fetch,\n  url: string,\n  body: object,\n  options?: FetchOptions,\n  parameters?: FetchParameters\n): Promise<any> {\n  return _handleRequest(fetcher, 'DELETE', url, options, parameters, body)\n}\n", "type Fetch = typeof fetch\n\nexport const resolveFetch = (customFetch?: Fetch): Fetch => {\n  let _fetch: Fetch\n  if (customFetch) {\n    _fetch = customFetch\n  } else if (typeof fetch === 'undefined') {\n    _fetch = async (...args) => await (await import('cross-fetch')).fetch(...args)\n  } else {\n    _fetch = fetch\n  }\n  return (...args) => _fetch(...args)\n}\n", "import { DEFAULT_HEADERS } from './constants'\nimport { Fetch, get, post, put, remove } from './fetch'\nimport { resolveFetch } from './helpers'\nimport { Bucket } from './types'\n\nexport class StorageBucketApi {\n  protected url: string\n  protected headers: { [key: string]: string }\n  protected fetch: Fetch\n\n  constructor(url: string, headers: { [key: string]: string } = {}, fetch?: Fetch) {\n    this.url = url\n    this.headers = { ...DEFAULT_HEADERS, ...headers }\n    this.fetch = resolveFetch(fetch)\n  }\n\n  /**\n   * Retrieves the details of all Storage buckets within an existing project.\n   */\n  async listBuckets(): Promise<{ data: Bucket[] | null; error: Error | null }> {\n    try {\n      const data = await get(this.fetch, `${this.url}/bucket`, { headers: this.headers })\n      return { data, error: null }\n    } catch (error) {\n      return { data: null, error }\n    }\n  }\n\n  /**\n   * Retrieves the details of an existing Storage bucket.\n   *\n   * @param id The unique identifier of the bucket you would like to retrieve.\n   */\n  async getBucket(id: string): Promise<{ data: Bucket | null; error: Error | null }> {\n    try {\n      const data = await get(this.fetch, `${this.url}/bucket/${id}`, { headers: this.headers })\n      return { data, error: null }\n    } catch (error) {\n      return { data: null, error }\n    }\n  }\n\n  /**\n   * Creates a new Storage bucket\n   *\n   * @param id A unique identifier for the bucket you are creating.\n   * @returns newly created bucket id\n   */\n  async createBucket(\n    id: string,\n    options: { public: boolean } = { public: false }\n  ): Promise<{ data: string | null; error: Error | null }> {\n    try {\n      const data = await post(\n        this.fetch,\n        `${this.url}/bucket`,\n        { id, name: id, public: options.public },\n        { headers: this.headers }\n      )\n      return { data: data.name, error: null }\n    } catch (error) {\n      return { data: null, error }\n    }\n  }\n\n  /**\n   * Updates a new Storage bucket\n   *\n   * @param id A unique identifier for the bucket you are updating.\n   */\n  async updateBucket(\n    id: string,\n    options: { public: boolean }\n  ): Promise<{ data: { message: string } | null; error: Error | null }> {\n    try {\n      const data = await put(\n        this.fetch,\n        `${this.url}/bucket/${id}`,\n        { id, name: id, public: options.public },\n        { headers: this.headers }\n      )\n      return { data, error: null }\n    } catch (error) {\n      return { data: null, error }\n    }\n  }\n\n  /**\n   * Removes all objects inside a single bucket.\n   *\n   * @param id The unique identifier of the bucket you would like to empty.\n   */\n  async emptyBucket(\n    id: string\n  ): Promise<{ data: { message: string } | null; error: Error | null }> {\n    try {\n      const data = await post(\n        this.fetch,\n        `${this.url}/bucket/${id}/empty`,\n        {},\n        { headers: this.headers }\n      )\n      return { data, error: null }\n    } catch (error) {\n      return { data: null, error }\n    }\n  }\n\n  /**\n   * Deletes an existing bucket. A bucket can't be deleted with existing objects inside it.\n   * You must first `empty()` the bucket.\n   *\n   * @param id The unique identifier of the bucket you would like to delete.\n   */\n  async deleteBucket(\n    id: string\n  ): Promise<{ data: { message: string } | null; error: Error | null }> {\n    try {\n      const data = await remove(\n        this.fetch,\n        `${this.url}/bucket/${id}`,\n        {},\n        { headers: this.headers }\n      )\n      return { data, error: null }\n    } catch (error) {\n      return { data: null, error }\n    }\n  }\n}\n", "import { Fetch, FetchParameters, get, post, remove } from './fetch'\nimport { resolveFetch } from './helpers'\nimport { FileObject, FileOptions, SearchOptions } from './types'\n\nconst DEFAULT_SEARCH_OPTIONS = {\n  limit: 100,\n  offset: 0,\n  sortBy: {\n    column: 'name',\n    order: 'asc',\n  },\n}\n\nconst DEFAULT_FILE_OPTIONS: FileOptions = {\n  cacheControl: '3600',\n  contentType: 'text/plain;charset=UTF-8',\n  upsert: false,\n}\n\nexport class StorageFileApi {\n  protected url: string\n  protected headers: { [key: string]: string }\n  protected bucketId?: string\n  protected fetch: Fetch\n\n  constructor(\n    url: string,\n    headers: { [key: string]: string } = {},\n    bucketId?: string,\n    fetch?: Fetch\n  ) {\n    this.url = url\n    this.headers = headers\n    this.bucketId = bucketId\n    this.fetch = resolveFetch(fetch)\n  }\n\n  /**\n   * Uploads a file to an existing bucket or replaces an existing file at the specified path with a new one.\n   *\n   * @param method HTTP method.\n   * @param path The relative file path. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to upload.\n   * @param fileBody The body of the file to be stored in the bucket.\n   * @param fileOptions HTTP headers.\n   * `cacheControl`: string, the `Cache-Control: max-age=<seconds>` seconds value.\n   * `contentType`: string, the `Content-Type` header value. Should be specified if using a `fileBody` that is neither `Blob` nor `File` nor `FormData`, otherwise will default to `text/plain;charset=UTF-8`.\n   * `upsert`: boolean, whether to perform an upsert.\n   */\n  private async uploadOrUpdate(\n    method: 'POST' | 'PUT',\n    path: string,\n    fileBody:\n      | ArrayBuffer\n      | ArrayBufferView\n      | Blob\n      | Buffer\n      | File\n      | FormData\n      | NodeJS.ReadableStream\n      | ReadableStream<Uint8Array>\n      | URLSearchParams\n      | string,\n    fileOptions?: FileOptions\n  ): Promise<{ data: { Key: string } | null; error: Error | null }> {\n    try {\n      let body\n      const options = { ...DEFAULT_FILE_OPTIONS, ...fileOptions }\n      const headers: Record<string, string> = {\n        ...this.headers,\n        ...(method === 'POST' && { 'x-upsert': String(options.upsert as boolean) }),\n      }\n\n      if (typeof Blob !== 'undefined' && fileBody instanceof Blob) {\n        body = new FormData()\n        body.append('cacheControl', options.cacheControl as string)\n        body.append('', fileBody)\n      } else if (typeof FormData !== 'undefined' && fileBody instanceof FormData) {\n        body = fileBody\n        body.append('cacheControl', options.cacheControl as string)\n      } else {\n        body = fileBody\n        headers['cache-control'] = `max-age=${options.cacheControl}`\n        headers['content-type'] = options.contentType as string\n      }\n\n      const cleanPath = this._removeEmptyFolders(path)\n      const _path = this._getFinalPath(cleanPath)\n      const res = await this.fetch(`${this.url}/object/${_path}`, {\n        method,\n        body: body as BodyInit,\n        headers,\n      })\n\n      if (res.ok) {\n        // const data = await res.json()\n        // temporary fix till backend is updated to the latest storage-api version\n        return { data: { Key: _path }, error: null }\n      } else {\n        const error = await res.json()\n        return { data: null, error }\n      }\n    } catch (error) {\n      return { data: null, error }\n    }\n  }\n\n  /**\n   * Uploads a file to an existing bucket.\n   *\n   * @param path The relative file path. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to upload.\n   * @param fileBody The body of the file to be stored in the bucket.\n   * @param fileOptions HTTP headers.\n   * `cacheControl`: string, the `Cache-Control: max-age=<seconds>` seconds value.\n   * `contentType`: string, the `Content-Type` header value. Should be specified if using a `fileBody` that is neither `Blob` nor `File` nor `FormData`, otherwise will default to `text/plain;charset=UTF-8`.\n   * `upsert`: boolean, whether to perform an upsert.\n   */\n  async upload(\n    path: string,\n    fileBody:\n      | ArrayBuffer\n      | ArrayBufferView\n      | Blob\n      | Buffer\n      | File\n      | FormData\n      | NodeJS.ReadableStream\n      | ReadableStream<Uint8Array>\n      | URLSearchParams\n      | string,\n    fileOptions?: FileOptions\n  ): Promise<{ data: { Key: string } | null; error: Error | null }> {\n    return this.uploadOrUpdate('POST', path, fileBody, fileOptions)\n  }\n\n  /**\n   * Replaces an existing file at the specified path with a new one.\n   *\n   * @param path The relative file path. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to upload.\n   * @param fileBody The body of the file to be stored in the bucket.\n   * @param fileOptions HTTP headers.\n   * `cacheControl`: string, the `Cache-Control: max-age=<seconds>` seconds value.\n   * `contentType`: string, the `Content-Type` header value. Should be specified if using a `fileBody` that is neither `Blob` nor `File` nor `FormData`, otherwise will default to `text/plain;charset=UTF-8`.\n   * `upsert`: boolean, whether to perform an upsert.\n   */\n  async update(\n    path: string,\n    fileBody:\n      | ArrayBuffer\n      | ArrayBufferView\n      | Blob\n      | Buffer\n      | File\n      | FormData\n      | NodeJS.ReadableStream\n      | ReadableStream<Uint8Array>\n      | URLSearchParams\n      | string,\n    fileOptions?: FileOptions\n  ): Promise<{ data: { Key: string } | null; error: Error | null }> {\n    return this.uploadOrUpdate('PUT', path, fileBody, fileOptions)\n  }\n\n  /**\n   * Moves an existing file.\n   *\n   * @param fromPath The original file path, including the current file name. For example `folder/image.png`.\n   * @param toPath The new file path, including the new file name. For example `folder/image-new.png`.\n   */\n  async move(\n    fromPath: string,\n    toPath: string\n  ): Promise<{ data: { message: string } | null; error: Error | null }> {\n    try {\n      const data = await post(\n        this.fetch,\n        `${this.url}/object/move`,\n        { bucketId: this.bucketId, sourceKey: fromPath, destinationKey: toPath },\n        { headers: this.headers }\n      )\n      return { data, error: null }\n    } catch (error) {\n      return { data: null, error }\n    }\n  }\n\n  /**\n   * Copies an existing file.\n   *\n   * @param fromPath The original file path, including the current file name. For example `folder/image.png`.\n   * @param toPath The new file path, including the new file name. For example `folder/image-copy.png`.\n   */\n  async copy(\n    fromPath: string,\n    toPath: string\n  ): Promise<{ data: { message: string } | null; error: Error | null }> {\n    try {\n      const data = await post(\n        this.fetch,\n        `${this.url}/object/copy`,\n        { bucketId: this.bucketId, sourceKey: fromPath, destinationKey: toPath },\n        { headers: this.headers }\n      )\n      return { data, error: null }\n    } catch (error) {\n      return { data: null, error }\n    }\n  }\n\n  /**\n   * Create signed URL to download file without requiring permissions. This URL can be valid for a set number of seconds.\n   *\n   * @param path The file path to be downloaded, including the current file name. For example `folder/image.png`.\n   * @param expiresIn The number of seconds until the signed URL expires. For example, `60` for a URL which is valid for one minute.\n   */\n  async createSignedUrl(\n    path: string,\n    expiresIn: number\n  ): Promise<{\n    data: { signedURL: string } | null\n    error: Error | null\n    signedURL: string | null\n  }> {\n    try {\n      const _path = this._getFinalPath(path)\n      let data = await post(\n        this.fetch,\n        `${this.url}/object/sign/${_path}`,\n        { expiresIn },\n        { headers: this.headers }\n      )\n      const signedURL = `${this.url}${data.signedURL}`\n      data = { signedURL }\n      return { data, error: null, signedURL }\n    } catch (error) {\n      return { data: null, error, signedURL: null }\n    }\n  }\n\n  /**\n   * Create signed URLs to download files without requiring permissions. These URLs can be valid for a set number of seconds.\n   *\n   * @param paths The file paths to be downloaded, including the current file names. For example `['folder/image.png', 'folder2/image2.png']`.\n   * @param expiresIn The number of seconds until the signed URLs expire. For example, `60` for URLs which are valid for one minute.\n   */\n  async createSignedUrls(\n    paths: string[],\n    expiresIn: number\n  ): Promise<{\n    data: { error: string | null; path: string | null; signedURL: string }[] | null\n    error: Error | null\n  }> {\n    try {\n      const data = await post(\n        this.fetch,\n        `${this.url}/object/sign/${this.bucketId}`,\n        { expiresIn, paths },\n        { headers: this.headers }\n      )\n      return {\n        data: data.map((datum: { signedURL: string }) => ({\n          ...datum,\n          signedURL: datum.signedURL ? `${this.url}${datum.signedURL}` : null,\n        })),\n        error: null,\n      }\n    } catch (error) {\n      return { data: null, error }\n    }\n  }\n\n  /**\n   * Downloads a file.\n   *\n   * @param path The file path to be downloaded, including the path and file name. For example `folder/image.png`.\n   */\n  async download(path: string): Promise<{ data: Blob | null; error: Error | null }> {\n    try {\n      const _path = this._getFinalPath(path)\n      const res = await get(this.fetch, `${this.url}/object/${_path}`, {\n        headers: this.headers,\n        noResolveJson: true,\n      })\n      const data = await res.blob()\n      return { data, error: null }\n    } catch (error) {\n      return { data: null, error }\n    }\n  }\n\n  /**\n   * Retrieve URLs for assets in public buckets\n   *\n   * @param path The file path to be downloaded, including the path and file name. For example `folder/image.png`.\n   */\n  getPublicUrl(\n    path: string\n  ): {\n    data: { publicURL: string } | null\n    error: Error | null\n    publicURL: string | null\n  } {\n    try {\n      const _path = this._getFinalPath(path)\n      const publicURL = `${this.url}/object/public/${_path}`\n      const data = { publicURL }\n      return { data, error: null, publicURL }\n    } catch (error) {\n      return { data: null, error, publicURL: null }\n    }\n  }\n\n  /**\n   * Deletes files within the same bucket\n   *\n   * @param paths An array of files to be deleted, including the path and file name. For example [`folder/image.png`].\n   */\n  async remove(paths: string[]): Promise<{ data: FileObject[] | null; error: Error | null }> {\n    try {\n      const data = await remove(\n        this.fetch,\n        `${this.url}/object/${this.bucketId}`,\n        { prefixes: paths },\n        { headers: this.headers }\n      )\n      return { data, error: null }\n    } catch (error) {\n      return { data: null, error }\n    }\n  }\n\n  /**\n   * Get file metadata\n   * @param id the file id to retrieve metadata\n   */\n  // async getMetadata(id: string): Promise<{ data: Metadata | null; error: Error | null }> {\n  //   try {\n  //     const data = await get(`${this.url}/metadata/${id}`, { headers: this.headers })\n  //     return { data, error: null }\n  //   } catch (error) {\n  //     return { data: null, error }\n  //   }\n  // }\n\n  /**\n   * Update file metadata\n   * @param id the file id to update metadata\n   * @param meta the new file metadata\n   */\n  // async updateMetadata(\n  //   id: string,\n  //   meta: Metadata\n  // ): Promise<{ data: Metadata | null; error: Error | null }> {\n  //   try {\n  //     const data = await post(`${this.url}/metadata/${id}`, { ...meta }, { headers: this.headers })\n  //     return { data, error: null }\n  //   } catch (error) {\n  //     return { data: null, error }\n  //   }\n  // }\n\n  /**\n   * Lists all the files within a bucket.\n   * @param path The folder path.\n   * @param options Search options, including `limit`, `offset`, `sortBy`, and `search`.\n   * @param parameters Fetch parameters, currently only supports `signal`, which is an AbortController's signal\n   */\n  async list(\n    path?: string,\n    options?: SearchOptions,\n    parameters?: FetchParameters\n  ): Promise<{ data: FileObject[] | null; error: Error | null }> {\n    try {\n      const body = { ...DEFAULT_SEARCH_OPTIONS, ...options, prefix: path || '' }\n      const data = await post(\n        this.fetch,\n        `${this.url}/object/list/${this.bucketId}`,\n        body,\n        { headers: this.headers },\n        parameters\n      )\n      return { data, error: null }\n    } catch (error) {\n      return { data: null, error }\n    }\n  }\n\n  _getFinalPath(path: string) {\n    return `${this.bucketId}/${path}`\n  }\n\n  _removeEmptyFolders(path: string) {\n    return path.replace(/^\\/|\\/$/g, '').replace(/\\/+/g, '/')\n  }\n}\n", "import { StorageBucketApi, StorageFileApi } from './lib'\nimport { Fetch } from './lib/fetch'\n\nexport class StorageClient extends StorageBucketApi {\n  constructor(url: string, headers: { [key: string]: string } = {}, fetch?: Fetch) {\n    super(url, headers, fetch)\n  }\n\n  /**\n   * Perform file operation in a bucket.\n   *\n   * @param id The bucket id to operate on.\n   */\n  from(id: string): StorageFileApi {\n    return new StorageFileApi(this.url, this.headers, id, this.fetch)\n  }\n}\n", "type Fetch = typeof fetch\n\nexport const resolveFetch = (customFetch?: Fetch): Fetch => {\n  let _fetch: Fetch\n  if (customFetch) {\n    _fetch = customFetch\n  } else if (typeof fetch === 'undefined') {\n    _fetch = async (...args) => await (await import('cross-fetch')).fetch(...args)\n  } else {\n    _fetch = fetch\n  }\n  return (...args) => _fetch(...args)\n}\n", "import { resolveFetch } from './helper'\nimport { Fetch, FunctionInvokeOptions } from './types'\n\nexport class FunctionsClient {\n  protected url: string\n  protected headers: Record<string, string>\n  protected fetch: Fetch\n\n  constructor(\n    url: string,\n    {\n      headers = {},\n      customFetch,\n    }: {\n      headers?: Record<string, string>\n      customFetch?: Fetch\n    } = {}\n  ) {\n    this.url = url\n    this.headers = headers\n    this.fetch = resolveFetch(customFetch)\n  }\n\n  /**\n   * Updates the authorization header\n   * @params token - the new jwt token sent in the authorisation header\n   */\n  setAuth(token: string) {\n    this.headers.Authorization = `Bearer ${token}`\n  }\n\n  /**\n   * Invokes a function\n   * @param functionName - the name of the function to invoke\n   * @param invokeOptions - object with the following properties\n   * `headers`: object representing the headers to send with the request\n   * `body`: the body of the request\n   * `responseType`: how the response should be parsed. The default is `json`\n   */\n  async invoke<T = any>(\n    functionName: string,\n    invokeOptions?: FunctionInvokeOptions\n  ): Promise<{ data: T; error: null } | { data: null; error: Error }> {\n    try {\n      const { headers, body } = invokeOptions ?? {}\n      const response = await this.fetch(`${this.url}/${functionName}`, {\n        method: 'POST',\n        headers: Object.assign({}, this.headers, headers),\n        body,\n      })\n\n      const isRelayError = response.headers.get('x-relay-error')\n      if (isRelayError && isRelayError === 'true') {\n        return { data: null, error: new Error(await response.text()) }\n      }\n\n      let data\n      const { responseType } = invokeOptions ?? {}\n      if (!responseType || responseType === 'json') {\n        data = await response.json()\n      } else if (responseType === 'arrayBuffer') {\n        data = await response.arrayBuffer()\n      } else if (responseType === 'blob') {\n        data = await response.blob()\n      } else {\n        data = await response.text()\n      }\n\n      return { data, error: null }\n    } catch (error: any) {\n      return { data: null, error }\n    }\n  }\n}\n", "import { DEFAULT_HEADERS, STORAGE_KEY } from './lib/constants'\nimport { stripTrailingSlash, isBrowser } from './lib/helpers'\nimport { Fetch, GenericObject, SupabaseClientOptions } from './lib/types'\nimport { SupabaseAuthClient } from './lib/SupabaseAuthClient'\nimport { SupabaseQueryBuilder } from './lib/SupabaseQueryBuilder'\nimport { SupabaseStorageClient } from '@supabase/storage-js'\nimport { FunctionsClient } from '@supabase/functions-js'\nimport { PostgrestClient } from '@supabase/postgrest-js'\nimport { AuthChangeEvent } from '@supabase/gotrue-js'\nimport { RealtimeClient, RealtimeSubscription, RealtimeClientOptions } from '@supabase/realtime-js'\n\nconst DEFAULT_OPTIONS = {\n  schema: 'public',\n  autoRefreshToken: true,\n  persistSession: true,\n  detectSessionInUrl: true,\n  multiTab: true,\n  headers: DEFAULT_HEADERS,\n}\n\n/**\n * Supabase Client.\n *\n * An isomorphic Javascript client for interacting with Postgres.\n */\nexport default class SupabaseClient {\n  /**\n   * Supabase Auth allows you to create and manage user sessions for access to data that is secured by access policies.\n   */\n  auth: SupabaseAuthClient\n\n  protected schema: string\n  protected restUrl: string\n  protected realtimeUrl: string\n  protected authUrl: string\n  protected storageUrl: string\n  protected functionsUrl: string\n  protected realtime: RealtimeClient\n  protected multiTab: boolean\n  protected fetch?: Fetch\n  protected changedAccessToken: string | undefined\n  protected shouldThrowOnError: boolean\n\n  protected headers: {\n    [key: string]: string\n  }\n\n  /**\n   * Create a new client for use in the browser.\n   * @param supabaseUrl The unique Supabase URL which is supplied when you create a new project in your project dashboard.\n   * @param supabaseKey The unique Supabase Key which is supplied when you create a new project in your project dashboard.\n   * @param options.schema You can switch in between schemas. The schema needs to be on the list of exposed schemas inside Supabase.\n   * @param options.autoRefreshToken Set to \"true\" if you want to automatically refresh the token before expiring.\n   * @param options.persistSession Set to \"true\" if you want to automatically save the user session into local storage.\n   * @param options.detectSessionInUrl Set to \"true\" if you want to automatically detects OAuth grants in the URL and signs in the user.\n   * @param options.headers Any additional headers to send with each network request.\n   * @param options.realtime Options passed along to realtime-js constructor.\n   * @param options.multiTab Set to \"false\" if you want to disable multi-tab/window events.\n   * @param options.fetch A custom fetch implementation.\n   */\n  constructor(\n    protected supabaseUrl: string,\n    protected supabaseKey: string,\n    options?: SupabaseClientOptions\n  ) {\n    if (!supabaseUrl) throw new Error('supabaseUrl is required.')\n    if (!supabaseKey) throw new Error('supabaseKey is required.')\n\n    const _supabaseUrl = stripTrailingSlash(supabaseUrl)\n    const settings = { ...DEFAULT_OPTIONS, ...options }\n\n    this.restUrl = `${_supabaseUrl}/rest/v1`\n    this.realtimeUrl = `${_supabaseUrl}/realtime/v1`.replace('http', 'ws')\n    this.authUrl = `${_supabaseUrl}/auth/v1`\n    this.storageUrl = `${_supabaseUrl}/storage/v1`\n\n    const isPlatform = _supabaseUrl.match(/(supabase\\.co)|(supabase\\.in)/)\n    if (isPlatform) {\n      const urlParts = _supabaseUrl.split('.')\n      this.functionsUrl = `${urlParts[0]}.functions.${urlParts[1]}.${urlParts[2]}`\n    } else {\n      this.functionsUrl = `${_supabaseUrl}/functions/v1`\n    }\n\n    this.schema = settings.schema\n    this.multiTab = settings.multiTab\n    this.fetch = settings.fetch\n    this.headers = { ...DEFAULT_HEADERS, ...options?.headers }\n    this.shouldThrowOnError = settings.shouldThrowOnError || false\n\n    this.auth = this._initSupabaseAuthClient(settings)\n    this.realtime = this._initRealtimeClient({ headers: this.headers, ...settings.realtime })\n\n    this._listenForAuthEvents()\n    this._listenForMultiTabEvents()\n\n    // In the future we might allow the user to pass in a logger to receive these events.\n    // this.realtime.onOpen(() => console.log('OPEN'))\n    // this.realtime.onClose(() => console.log('CLOSED'))\n    // this.realtime.onError((e: Error) => console.log('Socket error', e))\n  }\n\n  /**\n   * Supabase Functions allows you to deploy and invoke edge functions.\n   */\n  get functions() {\n    return new FunctionsClient(this.functionsUrl, {\n      headers: this._getAuthHeaders(),\n      customFetch: this.fetch,\n    })\n  }\n\n  /**\n   * Supabase Storage allows you to manage user-generated content, such as photos or videos.\n   */\n  get storage() {\n    return new SupabaseStorageClient(this.storageUrl, this._getAuthHeaders(), this.fetch)\n  }\n\n  /**\n   * Perform a table operation.\n   *\n   * @param table The table name to operate on.\n   */\n  from<T = any>(table: string): SupabaseQueryBuilder<T> {\n    const url = `${this.restUrl}/${table}`\n    return new SupabaseQueryBuilder<T>(url, {\n      headers: this._getAuthHeaders(),\n      schema: this.schema,\n      realtime: this.realtime,\n      table,\n      fetch: this.fetch,\n      shouldThrowOnError: this.shouldThrowOnError,\n    })\n  }\n\n  /**\n   * Perform a function call.\n   *\n   * @param fn  The function name to call.\n   * @param params  The parameters to pass to the function call.\n   * @param head   When set to true, no data will be returned.\n   * @param count  Count algorithm to use to count rows in a table.\n   *\n   */\n  rpc<T = any>(\n    fn: string,\n    params?: object,\n    {\n      head = false,\n      count = null,\n    }: { head?: boolean; count?: null | 'exact' | 'planned' | 'estimated' } = {}\n  ) {\n    const rest = this._initPostgRESTClient()\n    return rest.rpc<T>(fn, params, { head, count })\n  }\n\n  /**\n   * Closes and removes all subscriptions and returns a list of removed\n   * subscriptions and their errors.\n   */\n  async removeAllSubscriptions(): Promise<\n    { data: { subscription: RealtimeSubscription }; error: Error | null }[]\n  > {\n    const allSubs: RealtimeSubscription[] = this.getSubscriptions().slice()\n    const allSubPromises = allSubs.map((sub) => this.removeSubscription(sub))\n    const allRemovedSubs = await Promise.all(allSubPromises)\n\n    return allRemovedSubs.map(({ error }, i) => {\n      return {\n        data: { subscription: allSubs[i] },\n        error,\n      }\n    })\n  }\n\n  /**\n   * Closes and removes a subscription and returns the number of open subscriptions.\n   *\n   * @param subscription The subscription you want to close and remove.\n   */\n  async removeSubscription(\n    subscription: RealtimeSubscription\n  ): Promise<{ data: { openSubscriptions: number }; error: Error | null }> {\n    const { error } = await this._closeSubscription(subscription)\n    const allSubs: RealtimeSubscription[] = this.getSubscriptions()\n    const openSubCount = allSubs.filter((chan) => chan.isJoined()).length\n\n    if (allSubs.length === 0) await this.realtime.disconnect()\n\n    return { data: { openSubscriptions: openSubCount }, error }\n  }\n\n  private async _closeSubscription(\n    subscription: RealtimeSubscription\n  ): Promise<{ error: Error | null }> {\n    let error = null\n\n    if (!subscription.isClosed()) {\n      const { error: unsubError } = await this._unsubscribeSubscription(subscription)\n      error = unsubError\n    }\n\n    this.realtime.remove(subscription)\n\n    return { error }\n  }\n\n  private _unsubscribeSubscription(\n    subscription: RealtimeSubscription\n  ): Promise<{ error: Error | null }> {\n    return new Promise((resolve) => {\n      subscription\n        .unsubscribe()\n        .receive('ok', () => resolve({ error: null }))\n        .receive('error', (error: Error) => resolve({ error }))\n        .receive('timeout', () => resolve({ error: new Error('timed out') }))\n    })\n  }\n\n  /**\n   * Returns an array of all your subscriptions.\n   */\n  getSubscriptions(): RealtimeSubscription[] {\n    return this.realtime.channels as RealtimeSubscription[]\n  }\n\n  private _initSupabaseAuthClient({\n    autoRefreshToken,\n    persistSession,\n    detectSessionInUrl,\n    localStorage,\n    headers,\n    fetch,\n    cookieOptions,\n    multiTab,\n  }: SupabaseClientOptions) {\n    const authHeaders = {\n      Authorization: `Bearer ${this.supabaseKey}`,\n      apikey: `${this.supabaseKey}`,\n    }\n    return new SupabaseAuthClient({\n      url: this.authUrl,\n      headers: { ...headers, ...authHeaders },\n      autoRefreshToken,\n      persistSession,\n      detectSessionInUrl,\n      localStorage,\n      fetch,\n      cookieOptions,\n      multiTab,\n    })\n  }\n\n  private _initRealtimeClient(options?: RealtimeClientOptions) {\n    return new RealtimeClient(this.realtimeUrl, {\n      ...options,\n      params: { ...options?.params, apikey: this.supabaseKey },\n    })\n  }\n\n  private _initPostgRESTClient() {\n    return new PostgrestClient(this.restUrl, {\n      headers: this._getAuthHeaders(),\n      schema: this.schema,\n      fetch: this.fetch,\n      throwOnError: this.shouldThrowOnError,\n    })\n  }\n\n  private _getAuthHeaders(): GenericObject {\n    const headers: GenericObject = { ...this.headers }\n    const authBearer = this.auth.session()?.access_token ?? this.supabaseKey\n    headers['apikey'] = this.supabaseKey\n    headers['Authorization'] = headers['Authorization'] || `Bearer ${authBearer}`\n    return headers\n  }\n\n  private _listenForMultiTabEvents() {\n    if (!this.multiTab || !isBrowser() || !window?.addEventListener) {\n      return null\n    }\n\n    try {\n      return window?.addEventListener('storage', (e: StorageEvent) => {\n        if (e.key === STORAGE_KEY) {\n          const newSession = JSON.parse(String(e.newValue))\n          const accessToken: string | undefined =\n            newSession?.currentSession?.access_token ?? undefined\n          const previousAccessToken = this.auth.session()?.access_token\n          if (!accessToken) {\n            this._handleTokenChanged('SIGNED_OUT', accessToken, 'STORAGE')\n          } else if (!previousAccessToken && accessToken) {\n            this._handleTokenChanged('SIGNED_IN', accessToken, 'STORAGE')\n          } else if (previousAccessToken !== accessToken) {\n            this._handleTokenChanged('TOKEN_REFRESHED', accessToken, 'STORAGE')\n          }\n        }\n      })\n    } catch (error) {\n      console.error('_listenForMultiTabEvents', error)\n      return null\n    }\n  }\n\n  private _listenForAuthEvents() {\n    let { data } = this.auth.onAuthStateChange((event, session) => {\n      this._handleTokenChanged(event, session?.access_token, 'CLIENT')\n    })\n    return data\n  }\n\n  private _handleTokenChanged(\n    event: AuthChangeEvent,\n    token: string | undefined,\n    source: 'CLIENT' | 'STORAGE'\n  ) {\n    if (\n      (event === 'TOKEN_REFRESHED' || event === 'SIGNED_IN') &&\n      this.changedAccessToken !== token\n    ) {\n      // Token has changed\n      this.realtime.setAuth(token!)\n      // Ideally we should call this.auth.recoverSession() - need to make public\n      // to trigger a \"SIGNED_IN\" event on this client.\n      if (source == 'STORAGE') this.auth.setAuth(token!)\n\n      this.changedAccessToken = token\n    } else if (event === 'SIGNED_OUT' || event === 'USER_DELETED') {\n      // Token is removed\n      this.realtime.setAuth(this.supabaseKey)\n      if (source == 'STORAGE') this.auth.signOut()\n    }\n  }\n}\n", "import SupabaseClient from './SupabaseClient'\nimport { SupabaseClientOptions, SupabaseRealtimePayload } from './lib/types'\nimport { User as AuthUser, Session as AuthSession } from '@supabase/gotrue-js'\nexport * from '@supabase/gotrue-js'\nexport {\n  PostgrestResponse,\n  PostgrestSingleResponse,\n  PostgrestMaybeSingleResponse,\n  PostgrestError,\n} from '@supabase/postgrest-js'\nexport * from '@supabase/realtime-js'\n\n/**\n * Creates a new Supabase Client.\n */\nconst createClient = (\n  supabaseUrl: string,\n  supabaseKey: string,\n  options?: SupabaseClientOptions\n): SupabaseClient => {\n  return new SupabaseClient(supabaseUrl, supabaseKey, options)\n}\n\nexport {\n  createClient,\n  SupabaseClient,\n  SupabaseClientOptions,\n  SupabaseRealtimePayload,\n  AuthUser,\n  AuthSession,\n}\n"],
  "mappings": "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",
  "names": ["version", "DEFAULT_HEADERS", "version", "STORAGE_KEY", "isBrowser", "__awaiter", "fetch", "DEFAULT_HEADERS", "isBrowser", "STORAGE_KEY", "expiresAt", "__awaiter", "__awaiter", "res", "fetch", "fetch", "version", "DEFAULT_HEADERS", "version", "fetch", "DEFAULT_HEADERS", "PostgresTypes", "version", "DEFAULT_HEADERS", "version", "SOCKET_STATES", "CHANNEL_STATES", "CHANNEL_EVENTS", "TRANSPORTS", "CONNECTION_STATE", "noop", "DEFAULT_HEADERS", "__awaiter", "fetch", "version", "DEFAULT_HEADERS", "version", "_getErrorMessage", "handleError", "_getRequestParams", "_handleRequest", "get", "post", "put", "remove", "resolveFetch", "__awaiter", "fetch", "DEFAULT_HEADERS", "resolveFetch", "get", "post", "put", "remove", "fetch", "resolveFetch", "post", "get", "remove", "fetch", "resolveFetch", "__awaiter", "resolveFetch", "DEFAULT_OPTIONS", "fetch"]
}
